{"version":3,"file":"js/main.js","mappings":"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","sources":["webpack://craft-quick-field/./client/src/scripts/FieldModal.ts","webpack://craft-quick-field/./client/src/scripts/GroupDialog.ts","webpack://craft-quick-field/./client/src/scripts/Loader.ts","webpack://craft-quick-field/./client/src/scripts/QuickField.ts","webpack://craft-quick-field/external var \"jQuery\"","webpack://craft-quick-field/webpack/bootstrap","webpack://craft-quick-field/webpack/runtime/make namespace object","webpack://craft-quick-field/./client/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { DeleteFieldResponse, EditFieldResponse, SaveFieldResponse, Template } from './types/Response'\nimport Event from './types/Event'\n\n/**\n * An interface representing a `FieldModal`.\n */\ninterface FieldModalInterface extends GarnishModal {\n  $main: JQuery\n  $html: JQuery\n  $js: JQuery\n  $css: JQuery\n  $currentHtml: JQuery\n  $currentJs: JQuery\n  $currentCss: JQuery\n  $deleteBtn: JQuery\n  $deleteSpinner: JQuery\n  $loadSpinner: JQuery\n  $saveBtn: JQuery\n  $saveCopyBtn: JQuery\n  $saveSpinner: JQuery\n  $observed: JQuery\n  executedJs: Record<string, boolean>\n  loadedCss: Record<string, JQuery>\n  observer: MutationObserver\n  templateLoaded: boolean\n  addLayoutType: (layoutType: string) => void\n  destroyListeners: () => void\n  destroySettings: (e?: Event) => void\n  initListeners: () => void\n  initSettings: (e?: Event) => void\n  initTemplate: (template: Template) => void\n  parseTemplate: (template: Template) => void\n  promptForDelete: () => boolean\n  runExternalScripts: (files: string[]) => void\n}\n\n/**\n * An event that is triggered when a template is parsed.\n */\ninterface SettingsEvent extends Event {\n  $html: JQuery\n  $js: JQuery\n  $css: JQuery\n}\n\n/**\n * FieldModal class\n * Handles the modal window for creating new fields.\n */\nconst FieldModal = Garnish.Modal.extend({\n\n  $body: null,\n  $content: null,\n  $main: null,\n  $footer: null,\n  $leftButtons: null,\n  $rightButtons: null,\n  $deleteBtn: null,\n  $saveBtn: null,\n  $saveCopyBtn: null,\n  $cancelBtn: null,\n  $saveSpinner: null,\n  $deleteSpinner: null,\n  $loadSpinner: null,\n\n  $html: null,\n  $js: null,\n  $css: null,\n  $currentHtml: null,\n  $currentJs: null,\n  $currentCss: null,\n\n  $observed: null,\n  observer: null,\n\n  executedJs: null,\n  loadedCss: null,\n  templateLoaded: false,\n\n  _layoutTypes: null,\n\n  /**\n   * The constructor.\n   */\n  init (settings: object): void {\n    this.base()\n    this.setSettings(settings, {\n      resizable: true\n    })\n\n    this.$currentHtml = $()\n    this.$currentJs = $()\n    this.$currentCss = $()\n    this.$observed = $()\n\n    this.executedJs = {}\n    this.loadedCss = {}\n\n    this._layoutTypes = {}\n\n    // It's important to observe the DOM for new nodes when rendering the field settings template, as more\n    // complex fields may be adding elements to the body such as modal windows or helper elements. Since the\n    // settings template gets re-rendered each time the modal window is opened, these elements also get\n    // recreated, so if the old ones aren't tracked and removed then they start polluting the DOM and\n    // potentially affect performance.\n    // This feels like a hack, but unfortunately since field type behaviour cannot be predicted (for example,\n    // third-party field type plugins) this is the cleanest possible solution.\n    this.observer = new window.MutationObserver((mutations) => {\n      for (let i = 0; i < mutations.length; i++) {\n        this.$observed = this.$observed.add(mutations[i].addedNodes)\n      }\n    })\n\n    const $container = $('<form class=\"modal quick-field-modal\" style=\"display: none; opacity: 0;\">').appendTo(Garnish.$bod)\n\n    this.$body = $('<div class=\"body\">').appendTo($container)\n    this.$content = $('<div class=\"content\">').appendTo(this.$body)\n    this.$main = $('<div class=\"main\">').appendTo(this.$content)\n    this.$footer = $('<div class=\"footer\">').appendTo($container)\n    this.$loadSpinner = $('<div class=\"spinner big\">').appendTo($container)\n\n    this.$leftButtons = $('<div class=\"buttons left\">').appendTo(this.$footer)\n    this.$rightButtons = $('<div class=\"buttons right\">').appendTo(this.$footer)\n\n    this.$deleteBtn = $('<a class=\"delete error hidden\">').text(Craft.t('quick-field', 'Delete')).appendTo(this.$leftButtons)\n    this.$deleteSpinner = $('<div class=\"spinner hidden\">').appendTo(this.$leftButtons)\n\n    this.$cancelBtn = $('<div class=\"btn disabled\" role=\"button\">').text(Craft.t('quick-field', 'Cancel')).appendTo(this.$rightButtons)\n    this.$saveBtn = $('<div class=\"btn submit disabled\" role=\"button\">').text(Craft.t('quick-field', 'Save')).appendTo(this.$rightButtons)\n    this.$saveCopyBtn = $('<div class=\"btn submit disabled hidden\" role=\"button\">').text(Craft.t('quick-field', 'Save as a new field')).appendTo(this.$rightButtons)\n    this.$saveSpinner = $('<div class=\"spinner hidden\">').appendTo(this.$rightButtons)\n\n    this.setContainer($container)\n  },\n\n  /**\n   * Prepares the field settings template HTML, CSS and JavaScript.\n   * @param template - The template to initialise\n   * @public\n   */\n  initTemplate (this: FieldModalInterface, template: Template): void {\n    if (this.templateLoaded) {\n      return\n    }\n\n    const callback: (e: SettingsEvent) => void = (e) => {\n      this.$html = e.$html\n      this.$js = e.$js\n      this.$css = e.$css\n\n      this.templateLoaded = true\n      this.initListeners()\n\n      if (this.visible) {\n        this.initSettings()\n      }\n\n      this.off('parseTemplate', callback)\n    }\n\n    this.on('parseTemplate', callback)\n    this.parseTemplate(template)\n  },\n\n  /**\n   * Takes raw HTML, CSS and JavaScript, and parses it ready to be used in the DOM.\n   * It also loads any external resources if they are needed.\n   * @param template - The template to parse\n   * @public\n   */\n  parseTemplate (this: FieldModalInterface, template: Template): void {\n    const $head = Garnish.$doc.find('head')\n    const $html = $(template.html)\n    const $js = $(template.js).filter('script')\n    const $css = $(template.css).filter('style, link')\n\n    // Ensure that external stylesheets are loaded asynchronously\n    const $cssFiles = $css.filter('link').prop('async', true)\n    const $cssInline = $css.filter('style')\n\n    $cssFiles.each((_, cssFile) => {\n      const $cssFile = $(cssFile)\n      const src = $cssFile.prop('href')\n\n      if (typeof this.loadedCss[src] === 'undefined') {\n        $head.append($cssFile)\n        this.loadedCss[src] = $cssFile\n      }\n    })\n\n    // Load external JavaScript files asynchronously, and remove them from being executed again.\n    // This assumes that external JavaScript files are simply library files, that don't directly and\n    // instantly execute code that modifies the DOM. Library files can be loaded and executed once and\n    // reused later on.\n    // The JavaScript tags that directly contain code are assumed to be context-dependent, so they are\n    // saved to be executed each time the modal is opened.\n    const $jsFiles = $js.filter('[src]')\n    const $jsInline = $js.filter(':not([src])')\n\n    const jsFiles: string[] = []\n    $jsFiles.each((_, jsFile) => {\n      const $jsFile = $(jsFile)\n      const src = $jsFile.prop('src')\n\n      if (typeof this.executedJs[src] === 'undefined') {\n        jsFiles.push(src)\n        this.executedJs[src] = true\n      }\n    })\n\n    const callback: () => void = () => {\n      this.off('runExternalScripts', callback)\n\n      this.trigger('parseTemplate', {\n        target: this,\n        $html: $html,\n        $js: $jsInline,\n        $css: $cssInline\n      })\n    }\n\n    this.on('runExternalScripts', callback)\n    this.runExternalScripts(jsFiles)\n  },\n\n  /**\n   * Runs external JavaScript files.\n   * @param files - An array of URLs (as strings) to JavaScript files\n   * @public\n   */\n  runExternalScripts (files: string[]): void {\n    let filesCount = files.length\n\n    if (filesCount > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const src = files[i]\n\n        $.getScript(src)\n          .done((_, status) => {\n            if (status === 'success') {\n              filesCount--\n\n              if (filesCount === 0) {\n                this.trigger('runExternalScripts', {\n                  target: this\n                })\n              }\n            } else {\n              Craft.cp.displayError(Craft.t('quick-field', 'Could not load all resources.'))\n            }\n          })\n          .catch(() => Craft.cp.displayError(Craft.t('quick-field', 'Could not load all resources.')))\n      }\n    } else {\n      this.trigger('runExternalScripts', {\n        target: this\n      })\n    }\n  },\n\n  /**\n   * Binds all listeners so the Quick Field buttons can start working.\n   * @public\n   */\n  initListeners (): void {\n    this.$cancelBtn.removeClass('disabled')\n    this.$saveBtn.removeClass('disabled')\n    this.$saveCopyBtn.removeClass('disabled')\n\n    this.addListener(this.$cancelBtn, 'activate', 'closeModal')\n    this.addListener(this.$saveBtn, 'activate', 'saveField')\n    this.addListener(this.$saveCopyBtn, 'activate', 'saveField')\n    this.addListener(this.$deleteBtn, 'activate', 'deleteField')\n\n    this.on('show', this.initSettings)\n    this.on('fadeOut', this.destroySettings)\n\n    this.enable()\n  },\n\n  /**\n   * Unbinds all listeners.\n   * @public\n   */\n  destroyListeners (): void {\n    this.$cancelBtn.addClass('disabled')\n    this.$saveBtn.addClass('disabled')\n    this.$saveCopyBtn.addClass('disabled')\n\n    this.removeListener(this.$cancelBtn, 'activate')\n    this.removeListener(this.$saveBtn, 'activate')\n    this.removeListener(this.$saveCopyBtn, 'activate')\n    this.removeListener(this.$deleteBtn, 'activate')\n\n    this.off('show', this.initSettings)\n    this.off('fadeOut', this.destroySettings)\n\n    this.disable()\n  },\n\n  /**\n   * Initialises the HTML, CSS and JavaScript for the modal window.\n   * @param e - A `SettingsEvent` containing the HTML, CSS and JavaScript to initialise\n   * @public\n   */\n  initSettings (this: FieldModalInterface, e?: SettingsEvent): void {\n    const that: FieldModalInterface = e?.target ?? this\n\n    // If the template files aren't loaded yet, just cancel initialisation of the settings.\n    if (!that.templateLoaded) {\n      return\n    }\n\n    that.$currentHtml = e?.$html ?? that.$html.clone()\n    that.$currentJs = e?.$js ?? that.$js.clone()\n    that.$currentCss = e?.$css ?? that.$css.clone()\n\n    // Save any new nodes that are added to the body during initialisation, so they can be safely removed later.\n    that.$observed = $()\n    that.observer.observe(Garnish.$bod[0], { childList: true, subtree: false })\n\n    that.$main.append(that.$currentHtml)\n    Garnish.$bod.append(that.$currentJs)\n\n    // Only show the delete button if editing a field\n    const $fieldId = that.$main.find('input[name=\"qf[fieldId]\"]')\n    that.$deleteBtn.toggleClass('hidden', $fieldId.length === 0)\n\n    Craft.initUiElements()\n\n    // Rerun the external scripts as some field types may need to make DOM changes in their external files.\n    // This means that libraries are being initialized multiple times, but hopefully they're smart enough to\n    // deal with that. So far, no issues.\n    const callback: () => void = () => {\n      that.off('runExternalScripts', callback)\n\n      // Stop observing after a healthy timeout to ensure all mutations are captured.\n      setTimeout(() => that.observer.disconnect(), 1)\n    }\n\n    that.on('runExternalScripts', callback)\n    that.runExternalScripts(Object.keys(that.executedJs))\n  },\n\n  /**\n   * Event handler for when the modal window finishes fading out after hiding.\n   * Clears out all events and elements of the modal.\n   * @param e - An event containing the target to have its settings cleared\n   * @public\n   */\n  destroySettings (e?: Event): void {\n    const that = e?.target ?? this\n\n    that.$currentHtml.remove()\n    that.$currentJs.remove()\n    that.$currentCss.remove()\n    that.$observed.remove()\n\n    that.$deleteBtn.addClass('hidden')\n  },\n\n  /**\n   * Event handler for the Close button.\n   * Hides the modal window from view.\n   * @public\n   */\n  closeModal (): void {\n    this.hide()\n  },\n\n  /**\n   * Loads a template for editing an existing field.\n   * @param id - The field's ID\n   * @public\n   */\n  editField (id: number): void {\n    this.destroyListeners()\n    this.show()\n    this.initListeners()\n\n    this.$loadSpinner.removeClass('hidden')\n    const data = { fieldId: id }\n\n    Craft.sendActionRequest('POST', 'quick-field/actions/edit-field', { data })\n      .then((response: EditFieldResponse) => {\n        const callback: (e: Event) => void = (e) => {\n          this.destroySettings()\n          this.initSettings(e)\n          this.$saveCopyBtn.removeClass('hidden')\n          this.off('parseTemplate', callback)\n        }\n\n        this.on('parseTemplate', callback)\n        this.parseTemplate(response.data.template)\n      })\n      .catch(response => {\n        Craft.cp.displayError(\n          response.error ?? Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n        )\n        this.hide()\n      })\n      .finally(() => this.$loadSpinner.addClass('hidden'))\n  },\n\n  /**\n   * Event handler for the save button.\n   * Saves the new field form to the database.\n   * @param e - The event that was triggered\n   * @public\n   */\n  saveField (this: FieldModalInterface, e?: Event): void {\n    e?.preventDefault()\n\n    if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n      return\n    }\n\n    this.destroyListeners()\n\n    this.$saveSpinner.removeClass('hidden')\n    const saveAsNew = this.$saveCopyBtn.is(e?.target)\n    const $inputId = this.$container.find('input[name=\"qf[fieldId]\"]')\n\n    if (saveAsNew) {\n      $inputId.val('')\n    }\n\n    const data = this.$container.serialize()\n    const id = !saveAsNew && $inputId.length > 0 ? $inputId.val() : null\n\n    Craft.sendActionRequest('POST', 'quick-field/actions/save-field', { data })\n      .then((response: SaveFieldResponse) => {\n        this.initListeners()\n        const eventData = {\n          target: this,\n          field: response.data.field,\n          elementSelectors: response.data.elementSelectors,\n          selectorHtml: response.data.selectorHtml\n        }\n\n        if (id === null) {\n          this.trigger('newField', eventData)\n          Craft.cp.displayNotice(Craft.t('quick-field', 'New field created.'))\n        } else {\n          this.trigger('saveField', eventData)\n          Craft.cp.displayNotice(Craft.t('quick-field', '\\'{name}\\' field saved.', { name: response.data.field.name }))\n        }\n\n        this.hide()\n      })\n      .catch(({ response }) => {\n        if ((response.data?.template ?? null) !== null) {\n          if (this.visible) {\n            const callback: (e: Event) => void = (e) => {\n              this.initListeners()\n              this.destroySettings()\n              this.initSettings(e)\n              this.off('parseTemplate', callback)\n            }\n\n            this.on('parseTemplate', callback)\n            this.parseTemplate(response.data.template)\n            Garnish.shake(this.$container)\n          } else {\n            this.initListeners()\n          }\n        } else {\n          this.initListeners()\n          Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n        }\n      })\n      .finally(() => this.$saveSpinner.addClass('hidden'))\n  },\n\n  /**\n   * Event handler for the delete button.\n   * Deletes the field from the database.\n   * @param e - The event that was triggered\n   * @public\n   */\n  deleteField (this: FieldModalInterface, e?: Event): void {\n    e?.preventDefault()\n\n    if (this.$deleteBtn.hasClass('disabled') || !this.$deleteSpinner.hasClass('hidden')) {\n      return\n    }\n\n    if (this.promptForDelete()) {\n      this.destroyListeners()\n\n      this.$deleteSpinner.removeClass('hidden')\n\n      const inputId = this.$container.find('input[name=\"qf[fieldId]\"]')\n      const id = inputId.length > 0 ? inputId.val() : null\n\n      if (id === null) {\n        Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n        return\n      }\n\n      const data = { fieldId: id }\n\n      Craft.sendActionRequest('POST', 'quick-field/actions/delete-field', { data })\n        .then((response: DeleteFieldResponse) => {\n          this.initListeners()\n          this.trigger('deleteField', {\n            target: this,\n            field: response.data.field\n          })\n\n          Craft.cp.displayNotice(Craft.t('quick-field', '\\'{name}\\' field deleted.', { name: response.data.field.name }))\n          this.hide()\n        })\n        .catch(response => {\n          Craft.cp.displayError(\n            response.error ?? Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n          )\n          this.hide()\n        })\n        .finally(() => this.$deleteSpinner.addClass('hidden'))\n    }\n  },\n\n  /**\n   * Delete confirmation dialog box.\n   * @public\n   */\n  promptForDelete (): boolean {\n    return confirm(Craft.t('quick-field', 'Are you sure you want to delete this field?'))\n  },\n\n  /**\n   * Adds a field layout type.\n   * @param layoutType - A string representing a Craft element class that the layout belongs to\n   * @public\n   */\n  addLayoutType (layoutType: string): void {\n    if (typeof this._layoutTypes[layoutType] === 'undefined' || this._layoutTypes[layoutType] === 0) {\n      this._layoutTypes[layoutType] = 1\n      $(`<input type=\"hidden\" name=\"qf[layoutTypes][]\" value=\"${layoutType}\">`).prependTo(this.$container)\n    } else {\n      this._layoutTypes[layoutType]++\n    }\n  },\n\n  /**\n   * Removes a field layout type.\n   * @param layoutType - A string representing a Craft element class that the layout belongs to\n   * @public\n   */\n  removeLayoutType (layoutType: string): void {\n    if (typeof this._layoutTypes[layoutType] !== 'undefined' && this._layoutTypes[layoutType] > 0) {\n      this._layoutTypes[layoutType]--\n\n      if (this._layoutTypes[layoutType] === 0) {\n        this.$container.find(`input[name=\"qf[layoutTypes][]\"][value=\"${layoutType}\"]`).remove()\n      }\n    }\n  },\n\n  /**\n   * Prevents the modal from closing if it's disabled.\n   * This fixes issues if the modal is closed when saving/deleting fields.\n   * @public\n   */\n  hide (this: FieldModalInterface): void {\n    if (!this._disabled) {\n      this.base()\n      setTimeout(() => this.$saveCopyBtn.addClass('hidden'), 200)\n    }\n  },\n\n  /**\n   * Removes everything to do with the modal from the DOM.\n   * @public\n   */\n  destroy (): void {\n    this.base()\n\n    this.destroyListeners()\n    this.destroySettings()\n\n    this.$shade.remove()\n    this.$container.remove()\n\n    this.trigger('destroy')\n  }\n})\n\nexport { FieldModal, FieldModalInterface }\n","import { SaveGroupResponse } from './types/Response'\n\n/**\n * An interface representing a `GroupDialog`.\n */\ninterface GroupDialogInterface extends GarnishComponent {\n  addNewGroup: () => void\n  renameGroup: (id: number, name: string) => void\n  deleteGroup: (group: Group) => void\n  promptForGroupName: (oldName: string) => string\n}\n\n/**\n * A type for a function that is called after updating a field group.\n */\ntype GroupUpdateEventFunction = (target: GarnishComponent, group: Group, oldName: string) => void\n\n/**\n * GroupDialog class.\n * Handles the dialog box for creating new field groups.\n */\nconst GroupDialog = Garnish.Base.extend({\n\n  /**\n   * Requests input for new group name, then creates the group.\n   * @public\n   */\n  addNewGroup (): void {\n    this._saveGroup(\n      null,\n      '',\n      this._triggerGroupUpdateEvent('newGroup')\n    )\n  },\n\n  /**\n   * Requests input for a new name for an existing group, then updates the group.\n   * @param id - The group's ID\n   * @param name - The group's current name\n   * @public\n   */\n  renameGroup (id: number, name: string): void {\n    this._saveGroup(\n      id,\n      name,\n      this._triggerGroupUpdateEvent('renameGroup')\n    )\n  },\n\n  /**\n   * Internal function for saving new or updated groups.\n   * @param id - The group's ID\n   * @param oldName - The group's current name\n   * @param successCallback - A `GroupUpdateEventFunction` to be called after the group is saved\n   * @private\n   */\n  _saveGroup (id: number, oldName: string, successCallback: GroupUpdateEventFunction): void {\n    const name = this.promptForGroupName(oldName)\n\n    if (name !== null && name !== '' && name !== oldName) {\n      const data = {\n        name: name,\n        id: id\n      }\n\n      Craft.sendActionRequest('POST', 'fields/save-group', { data })\n        .then((response: SaveGroupResponse) => successCallback(this, response.data.group, oldName))\n        .catch(({ response }) => {\n          const errorCount = Object.keys(response.data?.errors ?? {}).length\n\n          if (errorCount > 0) {\n            const errors: string[] = this._flattenErrors(response.data.errors)\n            alert(`${Craft.t('quick-field', 'Could not save the group:')}\\n\\n${errors.join('\\n')}`)\n          } else {\n            Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n          }\n        })\n    }\n  },\n\n  /**\n   * Internal function for triggering a group update event with a given name.\n   * @param eventName - The name of the event to trigger\n   * @returns a `GroupUpdateEventFunction` for triggering an event with the given `eventName`\n   * @private\n   */\n  _triggerGroupUpdateEvent (eventName: string): GroupUpdateEventFunction {\n    return (target, group, oldName) => {\n      target.trigger(eventName, {\n        target: target,\n        group: group,\n        oldName: oldName\n      })\n    }\n  },\n\n  /**\n   * Prompts for confirmation of deleting a field group, then deletes the group.\n   * @param group - The group to delete\n   * @public\n   */\n  deleteGroup (group: Group): void {\n    if (confirm(Craft.t('quick-field', 'Are you sure you want to delete this group and all its fields?'))) {\n      const data = {\n        id: group.id\n      }\n      Craft.sendActionRequest('POST', 'fields/delete-group', { data })\n        .then(_ => this.trigger('deleteGroup', { group }))\n        .catch(_ => Craft.cp.displayError(Craft.t('quick-field', 'Could not delete the group.')))\n    }\n  },\n\n  /**\n   * Creates and opens the dialog box asking for a group name.\n   * @returns a string representing the new group name, or `null` if the prompt was cancelled\n   * @public\n   */\n  promptForGroupName (oldName: string): string|null {\n    return prompt(Craft.t('quick-field', 'What do you want to name the group?'), oldName)\n  },\n\n  /**\n   * Utility method that transforms returned errors from an async request into a single dimension array.\n   * This is useful when outputting errors to the screen, so conversion to string is simpler.\n   * @returns an array of strings representing the errors that occurred\n   * @private\n   */\n  _flattenErrors (responseErrors: Record<string, string>): string[] {\n    return Object.keys(responseErrors)\n      .reduce((errors: string[], key: string) => errors.concat(responseErrors[key]), [])\n  }\n})\n\nexport { GroupDialog, GroupDialogInterface }\n","import { LoadResponse } from './types/Response'\n\n/**\n * An interface representing a `Loader`.\n */\ninterface LoaderInterface extends GarnishComponent {\n  isUnloaded: () => boolean\n  load: () => void\n}\n\n/**\n * The state of a `Loader`.\n */\nenum LoadStatus {\n  UNLOADED,\n  LOADING,\n  LOADED\n}\n\n/**\n * Loader class.\n * Handles loading the data used by Quick Field.\n */\nconst Loader = Garnish.Base.extend({\n\n  loadStatus: null,\n\n  /**\n   * The constructor.\n   * @public\n   */\n  init (): void {\n    this.loadStatus = LoadStatus.UNLOADED\n    this.load()\n  },\n\n  /**\n   * Loads the field settings template file, as well as all the resources that come with it.\n   * @public\n   */\n  load (): void {\n    if (this.loadStatus === LoadStatus.UNLOADED) {\n      this.loadStatus = LoadStatus.LOADING\n      Craft.sendActionRequest('POST', 'quick-field/actions/load', {})\n        .then((response: LoadResponse) => {\n          this.loadStatus = LoadStatus.LOADED\n          this.trigger('load', {\n            template: response.data.template,\n            groups: response.data.groups\n          })\n        })\n        .catch(_ => {\n          this.loadStatus = LoadStatus.UNLOADED\n          this.trigger('unload')\n        })\n    }\n  },\n\n  /**\n   * Whether the initial load of Quick Field data hasn't occurred.\n   * @returns Whether the load status is unloaded\n   * @public\n   */\n  isUnloaded (): boolean {\n    return this.loadStatus === LoadStatus.UNLOADED\n  }\n})\n\nexport { Loader, LoaderInterface }\n","import * as $ from 'jquery'\nimport { FieldModal, FieldModalInterface } from './FieldModal'\nimport { GroupDialog, GroupDialogInterface } from './GroupDialog'\nimport { Loader, LoaderInterface } from './Loader'\nimport { LoadResponseData } from './types/Response'\nimport Event from './types/Event'\n\n/**\n * An interface representing a `QuickField`.\n */\ninterface QuickFieldInterface extends GarnishComponent {\n  dialog: GroupDialogInterface\n  loader: LoaderInterface\n  modal: FieldModalInterface\n  addFld: (fld: FieldLayoutDesigner) => void\n  addFieldEditButton: ($button: JQuery) => void\n  addFieldEditButtonListener: ($button: JQuery) => void\n  openDeleteGroupDialog: ($group: JQuery) => void\n  openRenameGroupDialog: ($group: JQuery) => void\n}\n\n/**\n * An interface representing a `QuickField`, for private use.\n */\ninterface QuickFieldPrivateInterface extends QuickFieldInterface {\n  _groupObserver: MutationObserver\n  _layouts: QuickFieldLayout[]\n  _history: QuickFieldHistoryItemInterface[]\n  _initialGroups: Group[]\n  _newField: () => void\n  _addField: (field: Field, elementSelectors: Record<string, string>) => void\n  _resetField: (field: Field, elementSelectors: Record<string, string>, selectorHtml: string) => void\n  _removeField: (field: Field) => void\n  _addGroup: (group: Group, resetFldGroups: boolean) => void\n  _removeGroup: (group: Group) => void\n  _renameGroup: (group: Group, oldName: string) => void\n  _addOptionToGroupSelect: ($option: JQuery, $select: JQuery, optionText: string) => void\n}\n\n/**\n * An event that is triggered when a group settings menu option is selected.\n */\ninterface OptionEvent extends Event {\n  option: string\n}\n\n/**\n * An event that is triggered when a field action occurs.\n */\ninterface FieldEvent extends Event {\n  field: Field\n}\n\n/**\n * An event that is triggered when a field is saved.\n */\ninterface SaveFieldEvent extends FieldEvent {\n  elementSelectors: Record<string, string>\n  selectorHtml: string\n}\n\n/**\n * An event that is triggered when a field group is deleted.\n */\ninterface DeleteGroupEvent extends Event {\n  group: Group\n}\n\n/**\n * An event that is triggered when a field group is saved.\n */\ninterface SaveGroupEvent extends Event {\n  group: Group\n  oldName: string\n}\n\n/**\n * An action that has occurred in the history of a `QuickField` instance.\n */\ninterface QuickFieldHistoryItemInterface {\n  action: QuickFieldHistoryAction\n  component: Field|Group\n  data?: QuickFieldHistoryItemData\n}\n\n/**\n * Field data for a Quick Field history action.\n */\ninterface QuickFieldHistoryFieldData {\n  elementSelectors: Record<string, string>\n  selectorHtml?: string\n}\n\n/**\n * Group data for a Quick Field history action.\n */\ninterface QuickFieldHistoryGroupData {\n  oldName: string\n}\n\n/**\n * Data for a Quick Field history action.\n */\ntype QuickFieldHistoryItemData = QuickFieldHistoryFieldData|QuickFieldHistoryGroupData\n\n/**\n * A Quick Field history action.\n */\nclass QuickFieldHistoryItem implements QuickFieldHistoryItemInterface {\n  private readonly _action: QuickFieldHistoryAction\n\n  constructor (action: QuickFieldHistoryAction, public component: Field|Group, public data?: QuickFieldHistoryItemData) {\n    this._action = action\n  }\n\n  get action (): QuickFieldHistoryAction {\n    return this._action\n  }\n}\n\n/**\n * A Quick Field history action on a field.\n */\nclass QuickFieldHistoryFieldItem extends QuickFieldHistoryItem {\n  constructor (action: QuickFieldHistoryAction, public component: Field, public data?: QuickFieldHistoryFieldData) {\n    super(action, component, data)\n  }\n}\n\n/**\n * A Quick Field history action on a group.\n */\nclass QuickFieldHistoryGroupItem extends QuickFieldHistoryItem {\n  constructor (action: QuickFieldHistoryAction, public component: Group, public data?: QuickFieldHistoryGroupData) {\n    super(action, component, data)\n  }\n}\n\n/**\n * The kind of Quick Field history action that occurred.\n */\nenum QuickFieldHistoryAction {\n  ADD,\n  EDIT,\n  REMOVE\n}\n\n/**\n * A container for managing Quick Field features on a field layout.\n */\nclass QuickFieldLayout {\n  /**\n   * The container for the new group/field buttons.\n   * @public\n   */\n  public $container\n\n  /**\n   * The new group button.\n   * @public\n   */\n  public $groupButton\n\n  /**\n   * The new field button.\n   * @public\n   */\n  public $fieldButton\n\n  /**\n   * The observer for changes to groups.\n   * @private\n   */\n  private readonly _groupObserver: MutationObserver\n\n  /**\n   * The observer for changes to groups.\n   * @private\n   */\n  private _type: string\n\n  /**\n   * Functions for replacing placeholder text in the field layout element sidebar.\n   * @private\n   */\n  private _replacePlaceholder: Record<number, Function>\n\n  /**\n   * The constructor.\n   * @param _quickField - The Quick Field instance.\n   * @param fld - A field layout designer to initialise for usage with Quick Field.\n   * @public\n   */\n  constructor (private readonly _quickField: QuickFieldInterface, public fld: FieldLayoutDesigner) {\n    this.fld.$container.addClass('quick-field')\n\n    this.$container = $('<div class=\"newfieldbtn-container btngroup small fullwidth\">').prependTo(fld.$fieldLibrary)\n    this.$groupButton = $('<div class=\"btn small add icon\" tabindex=\"0\">').text(Craft.t('quick-field', 'New Group')).appendTo(this.$container)\n    this.$fieldButton = $('<div class=\"btn small add icon\" tabindex=\"0\">').text(Craft.t('quick-field', 'New Field')).appendTo(this.$container)\n    this._replacePlaceholder = {}\n\n    // Make sure the groups are never hidden, so they can always be renamed or deleted\n    this._groupObserver = new window.MutationObserver(() => {\n      this.fld.$fieldGroups\n        .filter(function () {\n          // Don't unhide e.g. the 'standard fields' group\n          return ($(this).data('id')) ?? false\n        })\n        .removeClass('hidden')\n    })\n    this._groupObserver.observe(this.fld.$fieldLibrary[0], { attributes: true, childList: true, subtree: true })\n  }\n\n  /**\n   * Gets the type of this `QuickFieldLayout` instance's field layout.\n   * @returns the field layout type.\n   * @public\n   */\n  public getType (): string {\n    return this._type\n  }\n\n  /**\n   * Sets the type of this `QuickFieldLayout` instance's field layout.\n   * @public\n   */\n  public setType (type: string): void {\n    this._type = type\n  }\n\n  /**\n   * Attaches the 'new field' button to the button container.\n   * @public\n   */\n  public attachFieldButton (): void {\n    this.$fieldButton.appendTo(this.$container)\n  }\n\n  /**\n   * Detaches the 'new field' button from the button container.\n   * @public\n   */\n  public detachFieldButton (): void {\n    this.$fieldButton.detach()\n  }\n\n  /**\n   * Adds edit buttons to existing fields.\n   * @public\n   */\n  public addFieldEditButtons (): void {\n    const addFieldEditButton: (_: number, field: HTMLElement) => void = (_, field) => this._quickField.addFieldEditButton($(field))\n\n    // The fields on the sidebar\n    this.fld.$fields.filter('.unused[data-id]').each(addFieldEditButton)\n\n    // The fields on tabs\n    this.fld.$tabContainer.find('.fld-field[data-id]').each(addFieldEditButton)\n  }\n\n  /**\n   * Creates field group rename/delete menus.\n   * @public\n   */\n  public addGroupMenus (): void {\n    this.fld.$fieldGroups\n      .filter(function () {\n        return $(this).find('.fld-field[data-id]').length > 0\n      })\n      .each((_: number, group: HTMLElement) => this._addGroupMenu($(group)))\n  }\n\n  /**\n   * Creates a field group rename/delete menu.\n   * @param $group - A jQuery object representing the group to create a menu for\n   * @private\n   */\n  private _addGroupMenu ($group: JQuery): void {\n    const $button = $(`<button class=\"qf-settings icon menubtn\" title=\"${Craft.t('quick-field', 'Settings')}\" role=\"button\" type=\"button\"></button>`)\n    const $menu = $(`\n      <div class=\"menu\">\n        <ul class=\"padded\">\n          <li><a data-icon=\"edit\" data-action=\"rename\">${Craft.t('quick-field', 'Rename')}</a></li>\n          <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('quick-field', 'Delete')}</a></li>\n        </ul>\n      </div>\n    `)\n    $group.prepend($menu).prepend($button)\n    const settingsMenu = new Garnish.MenuBtn($button)\n    settingsMenu.on('optionSelect', (e: OptionEvent) => {\n      switch ($(e.option).attr('data-action')) {\n        case 'rename': this._quickField.openRenameGroupDialog($group); break\n        case 'delete': this._quickField.openDeleteGroupDialog($group)\n      }\n    })\n  }\n\n  /**\n   * Adds groups' ID data.\n   * @param groups - The groups to have their ID data added to their respective sidebar elements.\n   * @public\n   */\n  public addGroupIdData (groups: Group[]): void {\n    // Loop through the groups in reverse so we don't have to reset `this.fld.$fieldGroups` every\n    // time to get empty groups in the right place\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const group = groups[i]\n      let $group = this._getGroupByName(group.name)\n\n      if ($group.length === 0) {\n        this.addGroup(group, false)\n        $group = this._getGroupByName(group.name)\n      }\n\n      $group.data('id', group.id)\n    }\n\n    this._resetFldGroups()\n  }\n\n  /**\n   * Adds a field to the field layout designer.\n   * @param field - The field to add\n   * @param elementSelector - The element selector for the field\n   * @public\n   */\n  public addField (field: Field, elementSelector: string): void {\n    // Make sure the field doesn't already exist in the FLD sidebar\n    if (this.fld.$fields.filter(`.fld-field[data-id=\"${field.id}\"]`).length > 0) {\n      return\n    }\n\n    const $group = this._getGroupByName(field.group.name)\n\n    if ($group !== null) {\n      this._insertFieldElementIntoGroup(field, elementSelector, $group)\n    } else {\n      throw new Error('Invalid field group: {groupName}')\n    }\n  }\n\n  /**\n   * Removes a field from the field layout designer.\n   * @param id - The ID of the field to remove\n   * @public\n   */\n  public removeField (id: number): void {\n    const selector = `.fld-field[data-id=\"${id}\"]`\n    const fld = this.fld\n    const $fields = fld.$fields\n    const $field = $fields.filter(selector).add(fld.$tabContainer.find(selector))\n\n    if ($field.length > 0) {\n      $field.remove()\n      fld.$fields = $fields.not($field)\n      fld.elementDrag.removeItems($field)\n    }\n  }\n\n  /**\n   * Renames and regroups an existing field on the field layout designer.\n   * @param field - The field to reset\n   * @param elementSelector - The element selector to use on the field layout sidebar\n   * @param selectorHtml - The selector HTML to replace the existing selector HTML, if the field is on a field layout\n   * @public\n   */\n  public resetField (field: Field, elementSelector: string, selectorHtml: string): void {\n    const fld = this.fld\n    const $group = this._getGroupByName(field.group.name)\n\n    // Remove the old element from the sidebar\n    const $oldElement = fld.$fields.filter(`[data-id=\"${field.id}\"]`)\n    fld.elementDrag.removeItems($oldElement)\n    $oldElement.remove()\n\n    this._insertFieldElementIntoGroup(field, elementSelector, $group)\n    this._updateFldField(field, selectorHtml)\n  }\n\n  /**\n   * Updates a field on the field layout.\n   * @param field - The field to update\n   * @param selectorHtml - The selector HTML to replace the existing selector HTML\n   * @private\n   */\n  private _updateFldField (field: Field, selectorHtml: string): void {\n    const $fldField = this.fld.$tabContainer.find(`.fld-field[data-id=\"${field.id}\"]`)\n\n    if ($fldField.length === 0) {\n      // The field isn't on the field layout, so there's nothing to update\n      return\n    }\n\n    // Detach the required indicator before resetting the selector HTML, so we don't lose it\n    const $requiredIndicator = $fldField.find('.fld-required-indicator').detach()\n    const fldField = $fldField.data('fld-element')\n\n    // Detach the settings button before resetting the selector HTML, so we don't lose the on click event\n    // It will be reattached when calling `fldField.initUi()`\n    fldField.$editBtn.detach()\n\n    // Update the placeholder for the custom label in the settings if the field's been renamed\n    // This also involves resetting the field's `createSettings` event, so if the field's settings slideout hasn't been\n    // created yet, we can replace the placeholder with the correct field name when the slideout is created\n    if (typeof this._replacePlaceholder[field.id] !== 'undefined') {\n      fldField.off('createSettings.qf', this._replacePlaceholder[field.id])\n    }\n\n    this._replacePlaceholder[field.id] = function () {\n      this.slideout?.$container\n        .find('input[name$=\"[label]\"')\n        .attr('placeholder', field.name)\n    }.bind(fldField)\n    fldField.on('createSettings.qf', this._replacePlaceholder[field.id])\n    this._replacePlaceholder[field.id]()\n\n    // Now actually update the field\n    $fldField\n      .data('attribute', field.handle)\n      .html($(selectorHtml).html())\n\n    $requiredIndicator.appendTo($fldField.find('.fld-element-label'))\n    fldField.initUi()\n  }\n\n  /**\n   * Adds a group to the field layout sidebar.\n   * @param group - The group to add.\n   * @param resetFldGroups - Whether to reset the field layout designer's record of existing field groups\n   * @public\n   */\n  public addGroup (group: Group, resetFldGroups: boolean): void {\n    // Make sure the group doesn't already exist in the FLD sidebar\n    if (this._getGroupByName(group.name).length > 0) {\n      return\n    }\n\n    const name = group.name\n    const lowerCaseName = name.toLowerCase()\n    const $newGroup = $(`\n      <div class=\"fld-field-group\" data-name=\"${lowerCaseName}\">\n        <h6>${name}</h6>\n      </div>`)\n    this._addGroupMenu($newGroup)\n    this._attachGroup($newGroup, resetFldGroups)\n    this._getGroupByName(group.name).data('id', group.id)\n  }\n\n  /**\n   * Renames a field group on the field layout sidebar.\n   * @param group - The group to rename\n   * @param oldName - The group's previous name\n   * @public\n   */\n  public renameGroup (group: Group, oldName: string): void {\n    const $group = this._getGroupByName(oldName)\n\n    if ($group.length > 0) {\n      const newName = group.name\n      const lowerCaseName = newName.toLowerCase()\n      $group.detach()\n        .attr('data-name', lowerCaseName)\n        .data('name', lowerCaseName)\n        .children('h6').text(newName)\n      this._attachGroup($group, true)\n    }\n  }\n\n  /**\n   * Removes a group from the field layout sidebar, along with all of its fields.\n   * @param id - The ID of the group to remove\n   * @public\n   */\n  public removeGroup (id: number): void {\n    const fld = this.fld\n    const $deletedGroup = fld.$fieldGroups\n      .filter(function () {\n        return $(this).data('id') === id\n      })\n\n    // Remove any fields from this group from the tabs\n    const $usedFields = $deletedGroup.find('.fld-field.hidden')\n    const filterSelector = $usedFields.map((_: number, field: HTMLElement) => {\n      const fieldId: string = $(field).data('id')\n      return `[data-id=\"${fieldId}\"]`\n    }).get().join(',')\n    fld.$tabContainer\n      .find('.fld-field')\n      .filter(filterSelector)\n      .remove()\n\n    $deletedGroup.remove()\n    this._resetFldGroups()\n  }\n\n  /**\n   * Inserts a field element into the correct position in its group.\n   * @param field - The field to insert into the correct position\n   * @param elementSelector - The element selector to use on the field layout sidebar\n   * @param $group - A jQuery object representing the group to insert the field into\n   * @private\n   */\n  private _insertFieldElementIntoGroup (field: Field, elementSelector: string, $group: JQuery): void {\n    const fld = this.fld\n    const $element = $(elementSelector)\n    const lowerCaseName = field.name.toLowerCase()\n    let $prevElement = $group.children('.fld-element').filter(function () {\n      return $(this).find('h4').text().toLowerCase() < lowerCaseName\n    }).last()\n\n    if ($prevElement.length === 0) {\n      $prevElement = $group.children('h6')\n    }\n\n    $element.insertAfter($prevElement)\n    fld.elementDrag.addItems($element)\n    this._quickField.addFieldEditButton($element)\n    fld.$fields = fld.$fieldGroups.children('.fld-element')\n  }\n\n  /**\n   * Attaches a group to the correct position in the field layout sidebar.\n   * @param $group - A jQuery object representing the group to attach\n   * @param resetFldGroups - Whether to reset the field layout designer's record of existing field groups\n   * @private\n   */\n  private _attachGroup ($group: JQuery, resetFldGroups: boolean): void {\n    const fld = this.fld\n    const lowerCaseName = $group.attr('data-name') ?? ''\n    let $prevElement = fld.$fieldGroups.filter(function () {\n      const $this = $(this)\n      return $this.is(':first-of-type') || $this.data('name') < lowerCaseName\n    }).last()\n\n    if ($prevElement.length === 0) {\n      $prevElement = fld.$fieldSearch.parent()\n    }\n\n    $group.insertAfter($prevElement)\n\n    if (resetFldGroups) {\n      this._resetFldGroups()\n    }\n  }\n\n  /**\n   * Resets Craft's record of the field groups in the field layout designer sidebar.\n   * @private\n   */\n  private _resetFldGroups (): void {\n    this.fld.$fieldGroups = this.fld.$sidebar.find('.fld-field-group')\n  }\n\n  /**\n   * Finds the group element from its name.\n   * @param name - The name of the group to find\n   * @returns A JQuery object representing the found group\n   * @private\n   */\n  private _getGroupByName (name: string): JQuery {\n    // Filtering `this.fld.$sidebar.find('.fld-field-group')` instead of `this.fld.$fieldGroups`, in\n    // case we're adding groups and we haven't reset `this.fld.$fieldGroups` yet\n    return this.fld.$sidebar.find('.fld-field-group').filter(`[data-name=\"${name.toLowerCase()}\"]`)\n  }\n}\n\n/**\n * QuickField class\n * Handles the buttons for creating new groups and fields inside a FieldLayoutDesigner.\n */\nconst QuickField = Garnish.Base.extend({\n\n  dialog: null,\n  modal: null,\n  loader: null,\n\n  _layouts: null,\n  _history: null,\n  _initialGroups: null,\n\n  /**\n   * The QuickField constructor.\n   * @public\n   */\n  init (this: QuickFieldPrivateInterface): void {\n    let fieldButtonAttached = true\n\n    this._layouts = []\n    this._history = []\n    this.dialog = new GroupDialog()\n    this.modal = new FieldModal()\n    this.loader = new Loader()\n\n    this.dialog.on('newGroup', (e: SaveGroupEvent) => {\n      const group = e.group\n      this._addGroup(group, true)\n\n      if (this.loader.isUnloaded()) {\n        this.loader.load()\n      } else if (!fieldButtonAttached) {\n        this._layouts.forEach((layout) => layout.attachFieldButton())\n        fieldButtonAttached = true\n      }\n    })\n\n    this.dialog.on('renameGroup', (e: SaveGroupEvent) => this._renameGroup(e.group, e.oldName))\n    this.dialog.on('deleteGroup', (e: DeleteGroupEvent) => {\n      this._removeGroup(e.group)\n\n      this._layouts.forEach((layout) => {\n        if (layout.fld.$fieldGroups.not('.hidden').length === 0) {\n          layout.detachFieldButton()\n          fieldButtonAttached = false\n        }\n      })\n    })\n\n    this.modal.on('newField', (e: SaveFieldEvent) => this._addField(e.field, e.elementSelectors))\n    this.modal.on('saveField', (e: SaveFieldEvent) => this._resetField(e.field, e.elementSelectors, e.selectorHtml))\n    this.modal.on('deleteField', (e: FieldEvent) => this._removeField(e.field))\n    this.modal.on('destroy', () => {\n      this._layouts.forEach((layout) => layout.detachFieldButton())\n      fieldButtonAttached = false\n    })\n\n    this.loader.on('load', (e: LoadResponseData) => {\n      this.modal.$loadSpinner.addClass('hidden')\n      this.modal.initTemplate(e.template)\n      this._layouts.forEach((layout) => layout.addGroupIdData(e.groups))\n      this._initialGroups = e.groups\n\n      if (!fieldButtonAttached) {\n        this._layouts.forEach((layout) => layout.$fieldButton.appendTo(layout.$container))\n        fieldButtonAttached = true\n      }\n    })\n    this.loader.on('unload', () => this.modal.destroy())\n  },\n\n  /**\n   * Adds a field layout designer to be initialised for use by Quick Field.\n   * @param fld - The field layout designer to add\n   * @public\n   */\n  addFld (this: QuickFieldPrivateInterface, fld: FieldLayoutDesigner): void {\n    const newLayout = new QuickFieldLayout(this, fld)\n    this._layouts.push(newLayout)\n    this.addListener(newLayout.$groupButton, 'activate', '_newGroup')\n    this.addListener(newLayout.$fieldButton, 'activate', '_newField')\n\n    newLayout.addFieldEditButtons()\n    newLayout.addGroupMenus()\n\n    if (this._initialGroups !== null) {\n      newLayout.addGroupIdData(this._initialGroups)\n    }\n\n    // Get the field layout type from one of the UI elements' settings HTML\n    const matches = fld.$uiLibraryElements\n      .filter('[data-type=\"craft-fieldlayoutelements-Heading\"]')\n      .data('settings-html')\n      .match(/elementType&quot;:&quot;([a-zA-Z\\\\]+)&quot;,&quot;sourceKey/g)\n    const layoutType = matches[matches.length - 1].split('&quot;')[2].replaceAll('\\\\\\\\', '\\\\')\n    this.modal.addLayoutType(layoutType)\n    newLayout.setType(layoutType)\n\n    // Update this FLD with any changes made so far\n    this._history.forEach((item) => {\n      if (item instanceof QuickFieldHistoryFieldItem) {\n        switch (item.action) {\n          case QuickFieldHistoryAction.ADD:\n            newLayout.addField(item.component, item.data?.elementSelectors[layoutType] ?? '')\n            break\n          case QuickFieldHistoryAction.EDIT:\n            newLayout.resetField(item.component, item.data?.elementSelectors[layoutType] ?? '', item.data?.selectorHtml ?? '')\n            break\n          case QuickFieldHistoryAction.REMOVE:\n            newLayout.removeField(item.component.id)\n        }\n      } else if (item instanceof QuickFieldHistoryGroupItem) {\n        switch (item.action) {\n          case QuickFieldHistoryAction.ADD:\n            newLayout.addGroup(item.component, true)\n            break\n          case QuickFieldHistoryAction.EDIT:\n            newLayout.renameGroup(item.component, item.data?.oldName ?? '')\n            break\n          case QuickFieldHistoryAction.REMOVE:\n            newLayout.removeGroup(item.component.id)\n        }\n      }\n    })\n  },\n\n  /**\n   * Creates field edit buttons and attaches them to the field.\n   * @param $field - A jQuery object representing the field to add an edit button to\n   * @public\n   */\n  addFieldEditButton ($field: JQuery): void {\n    const $button = $('<a class=\"qf-edit icon\" title=\"Edit\"></a>')\n    this.addFieldEditButtonListener($button)\n    $field.append($button)\n  },\n\n  /**\n   * Adds a listener to a field edit button.\n   * @param $button - A jQuery object representing the field edit button\n   * @public\n   */\n  addFieldEditButtonListener ($button: JQuery): void {\n    this.addListener($button, 'activate', '_editField')\n  },\n\n  /**\n   * Event handler for the New Field button.\n   * Creates a modal window that contains new field settings.\n   * @private\n   */\n  _newField (): void {\n    this.modal.show()\n  },\n\n  /**\n   * Event handler for the edit buttons on fields.\n   * Opens a modal window that contains the field settings.\n   * @param e - The event\n   * @private\n   */\n  _editField (e: Event): void {\n    const $button = $(e.target)\n    const $field = $button.parent()\n    const id = $field.data('id')\n\n    this.modal.editField(id)\n  },\n\n  /**\n   * Adds a new unused field to the field layout designers.\n   * @param field - The field to add\n   * @param elementSelectors - The element selectors to use on the field layouts, depending on the layout types\n   * @private\n   */\n  _addField (this: QuickFieldPrivateInterface, field: Field, elementSelectors: Record<string, string>): void {\n    try {\n      this._layouts.forEach((layout) => {\n        const layoutType = layout.getType()\n        layout.addField(field, elementSelectors[layoutType])\n      })\n      this._history.push(new QuickFieldHistoryFieldItem(QuickFieldHistoryAction.ADD, field, { elementSelectors }))\n    } catch (e) {\n      Craft.cp.displayError(Craft.t('quick-field', e.message, { groupName: field.group.name }))\n    }\n  },\n\n  /**\n   * Removes a field from the field layout designers.\n   * @param field - The field to remove\n   * @private\n   */\n  _removeField (this: QuickFieldPrivateInterface, field: Field): void {\n    this._layouts.forEach((layout) => layout.removeField(field.id))\n    this._history.push(new QuickFieldHistoryFieldItem(QuickFieldHistoryAction.REMOVE, field))\n  },\n\n  /**\n   * Renames and regroups an existing field on the field layout designers.\n   * @param field - The field to reset\n   * @param elementSelectors - The element selectors to use on the field layout sidebars, depending on the layout types\n   * @param selectorHtml - The selector HTML to replace the existing selector HTML, if the field is on a field layout\n   * @private\n   */\n  _resetField (this: QuickFieldPrivateInterface, field: Field, elementSelectors: Record<string, string>, selectorHtml: string): void {\n    this._layouts.forEach((layout) => {\n      const layoutType = layout.getType()\n      layout.resetField(field, elementSelectors[layoutType], selectorHtml)\n    })\n    this._history.push(new QuickFieldHistoryFieldItem(QuickFieldHistoryAction.EDIT, field, { elementSelectors, selectorHtml }))\n  },\n\n  /**\n   * Event listener for the new group button\n   * @private\n   */\n  _newGroup (): void {\n    this.dialog.addNewGroup()\n  },\n\n  /**\n   * Adds a new unused field group to the field layout designer sidebar.\n   * @param group - The group to add\n   * @param resetFldGroups - Whether to reset the field layout designers' records of existing field groups\n   * @private\n   */\n  _addGroup (this: QuickFieldPrivateInterface, group: Group, resetFldGroups: boolean): void {\n    this._layouts.forEach((layout) => layout.addGroup(group, resetFldGroups))\n    this._history.push(new QuickFieldHistoryGroupItem(QuickFieldHistoryAction.ADD, group))\n\n    // Add this group to the 'new field' group options if the modal's already been loaded\n    if (this.modal.$html !== null) {\n      this._addOptionToGroupSelect(\n        $(`<option value=\"${group.id}\">${group.name}</option>`),\n        this.modal.$html.find('#qf-group'),\n        group.name\n      )\n    }\n  },\n\n  /**\n   * Opens the field group dialog for renaming a group.\n   * @param $group - A jQuery object representing the field group to rename\n   */\n  openRenameGroupDialog ($group: JQuery): void {\n    const id = $group.data('id')\n    const oldName = $group.children('h6').text()\n    this.dialog.renameGroup(id, oldName)\n  },\n\n  /**\n   * Renames a field group.\n   * @param group - The field group to rename\n   * @param oldName - The field group's previous name\n   * @private\n   */\n  _renameGroup (this: QuickFieldPrivateInterface, group: Group, oldName: string): void {\n    this._layouts.forEach((layout) => layout.renameGroup(group, oldName))\n    this._history.push(new QuickFieldHistoryGroupItem(QuickFieldHistoryAction.EDIT, group, { oldName }))\n\n    // Update this group in the 'new field' group options\n    const $select = this.modal.$html.find('#qf-group')\n    const $options = $select.children()\n    const $option = $options.filter(function () {\n      return $(this).text() === oldName\n    }).detach().text(group.name)\n    this._addOptionToGroupSelect($option, $select, group.name)\n  },\n\n  /**\n   * Adds a field group option to the new field template.\n   * @param $option - A jQuery object representing the option to add to the group select\n   * @param $select - A jQuery object representing the group select\n   * @param optionText - The text being used for the new option\n   * @private\n   */\n  _addOptionToGroupSelect ($option: JQuery, $select: JQuery, optionText: string): void {\n    const $prevOption = $select.children().filter(function () {\n      return $(this).text().toLowerCase() < optionText.toLowerCase()\n    }).last()\n\n    if ($prevOption.length > 0) {\n      $option.insertAfter($prevOption)\n    } else {\n      $option.prependTo($select)\n    }\n  },\n\n  /**\n   * Opens the field group dialog for deleting a group.\n   * @param $group - A jQuery object representing the field group to rename\n   * @public\n   */\n  openDeleteGroupDialog ($group: JQuery): void {\n    const group = {\n      id: $group.data('id'),\n      name: $group.children('h6').text()\n    }\n    this.dialog.deleteGroup(group)\n  },\n\n  /**\n   * Removes a deleted field group, and any fields belonging to it.\n   * @param group - The field group to delete\n   * @private\n   */\n  _removeGroup (this: QuickFieldPrivateInterface, group: Group): void {\n    this._layouts.forEach((layout) => layout.removeGroup(group.id))\n    this._history.push(new QuickFieldHistoryGroupItem(QuickFieldHistoryAction.REMOVE, group))\n\n    // Remove this group from the 'new field' group options\n    this.modal.$html.find('#qf-group').children(`[value=\"${group.id}\"]`).remove()\n  }\n})\n\nexport { QuickField, QuickFieldInterface }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { QuickField, QuickFieldInterface } from './QuickField'\nimport '../styles/main.scss'\n\ndeclare global {\n  interface Window {\n    QuickField: QuickFieldInterface\n  }\n}\n\nwindow.QuickField = new QuickField()\nconst FLD = Craft.FieldLayoutDesigner\nconst FLDinit = FLD.prototype.init\nconst FLDElement = FLD.Element\nconst FLDElementInitUi = FLDElement.prototype.initUi\n\n/**\n * Overrides the current FieldLayoutDesigner 'constructor' so new buttons can be initialised.\n */\nFLD.prototype.init = function (this: FieldLayoutDesigner) {\n  FLDinit.apply(this, arguments)\n\n  if (this.$container.is('.layoutdesigner')) {\n    window.QuickField.addFld(this)\n  }\n}\n\n/**\n * Overrides the current FieldLayoutDesigner.Element.initUi() so field edit buttons can be initialised.\n */\nFLDElement.prototype.initUi = function (this: FldElement) {\n  FLDElementInitUi.apply(this, arguments)\n\n  if (this.$container.is('.fld-field[data-id]')) {\n    const $editButton = this.$container.find('.qf-edit')\n\n    if ($editButton.length > 0) {\n      window.QuickField.addFieldEditButtonListener($editButton)\n    } else {\n      window.QuickField.addFieldEditButton(this.$container)\n    }\n  }\n}\n"],"names":["FieldModal","Garnish","Modal","extend","$body","$content","$main","$footer","$leftButtons","$rightButtons","$deleteBtn","$saveBtn","$saveCopyBtn","$cancelBtn","$saveSpinner","$deleteSpinner","$loadSpinner","$html","$js","$css","$currentHtml","$currentJs","$currentCss","$observed","observer","executedJs","loadedCss","templateLoaded","_layoutTypes","init","settings","this","base","setSettings","resizable","$","window","MutationObserver","mutations","i","length","add","addedNodes","$container","appendTo","$bod","text","Craft","t","setContainer","initTemplate","template","callback","e","initListeners","visible","initSettings","off","on","parseTemplate","$head","$doc","find","html","js","filter","css","$cssFiles","prop","$cssInline","each","_","cssFile","$cssFile","src","append","$jsFiles","$jsInline","jsFiles","jsFile","push","trigger","target","runExternalScripts","files","filesCount","getScript","done","status","cp","displayError","catch","removeClass","addListener","destroySettings","enable","destroyListeners","addClass","removeListener","disable","that","clone","observe","childList","subtree","$fieldId","toggleClass","initUiElements","setTimeout","disconnect","Object","keys","remove","closeModal","hide","editField","id","show","data","fieldId","sendActionRequest","then","response","error","finally","saveField","preventDefault","hasClass","saveAsNew","is","$inputId","val","serialize","eventData","field","elementSelectors","selectorHtml","displayNotice","name","shake","deleteField","promptForDelete","inputId","confirm","addLayoutType","layoutType","prependTo","removeLayoutType","_disabled","destroy","$shade","GroupDialog","Base","addNewGroup","_saveGroup","_triggerGroupUpdateEvent","renameGroup","oldName","successCallback","promptForGroupName","group","errors","_flattenErrors","alert","join","eventName","deleteGroup","prompt","responseErrors","reduce","key","concat","LoadStatus","Loader","loadStatus","UNLOADED","load","LOADING","LOADED","groups","isUnloaded","QuickFieldHistoryItem","constructor","action","component","_action","QuickFieldHistoryFieldItem","super","QuickFieldHistoryGroupItem","QuickFieldHistoryAction","QuickFieldLayout","_quickField","fld","$fieldLibrary","$groupButton","$fieldButton","_replacePlaceholder","_groupObserver","$fieldGroups","attributes","getType","_type","setType","type","attachFieldButton","detachFieldButton","detach","addFieldEditButtons","addFieldEditButton","$fields","$tabContainer","addGroupMenus","_addGroupMenu","$group","$button","$menu","prepend","MenuBtn","option","attr","openRenameGroupDialog","openDeleteGroupDialog","addGroupIdData","_getGroupByName","addGroup","_resetFldGroups","addField","elementSelector","Error","_insertFieldElementIntoGroup","removeField","selector","$field","not","elementDrag","removeItems","resetField","$oldElement","_updateFldField","$fldField","$requiredIndicator","fldField","$editBtn","slideout","bind","handle","initUi","resetFldGroups","lowerCaseName","toLowerCase","$newGroup","_attachGroup","newName","children","removeGroup","$deletedGroup","filterSelector","map","get","$element","$prevElement","last","insertAfter","addItems","$this","$fieldSearch","parent","$sidebar","QuickField","dialog","modal","loader","_layouts","_history","_initialGroups","fieldButtonAttached","_addGroup","forEach","layout","_renameGroup","_removeGroup","_addField","_resetField","_removeField","addFld","newLayout","matches","$uiLibraryElements","match","split","replaceAll","item","ADD","EDIT","REMOVE","addFieldEditButtonListener","_newField","_editField","message","groupName","_newGroup","_addOptionToGroupSelect","$select","$option","optionText","$prevOption","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","r","Symbol","toStringTag","defineProperty","value","FLD","FieldLayoutDesigner","FLDinit","prototype","FLDElement","Element","FLDElementInitUi","apply","arguments","$editButton"],"sourceRoot":""}