{"version":3,"file":"js/main.js","mappings":"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","sources":["webpack://craft-quick-field/./client/src/scripts/FieldModal.ts","webpack://craft-quick-field/./client/src/scripts/GroupDialog.ts","webpack://craft-quick-field/./client/src/scripts/Loader.ts","webpack://craft-quick-field/./client/src/scripts/QuickField.ts","webpack://craft-quick-field/external var \"jQuery\"","webpack://craft-quick-field/webpack/bootstrap","webpack://craft-quick-field/webpack/runtime/make namespace object","webpack://craft-quick-field/./client/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { DeleteFieldResponse, EditFieldResponse, SaveFieldResponse, Template } from './types/Response'\nimport Event from './types/Event'\n\ninterface FieldModal extends GarnishModal {\n  $main: JQuery\n  $html: JQuery\n  $js: JQuery\n  $css: JQuery\n  $currentHtml: JQuery\n  $currentJs: JQuery\n  $currentCss: JQuery\n  $deleteBtn: JQuery\n  $deleteSpinner: JQuery\n  $saveBtn: JQuery\n  $saveCopyBtn: JQuery\n  $saveSpinner: JQuery\n  $observed: JQuery\n  executedJs: Record<string, boolean>\n  loadedCss: Record<string, JQuery>\n  observer: MutationObserver\n  templateLoaded: boolean\n  base: () => void\n  destroyListeners: () => void\n  destroySettings: (e?: Event) => void\n  initListeners: () => void\n  initSettings: (e?: Event) => void\n  parseTemplate: (template: Template) => void\n  promptForDelete: () => boolean\n  runExternalScripts: (files: string[]) => void\n}\n\ninterface SettingsEvent extends Event {\n  $html: JQuery\n  $js: JQuery\n  $css: JQuery\n}\n\n/**\n * FieldModal class\n * Handles the modal window for creating new fields.\n */\nexport default Garnish.Modal.extend({\n\n  $body: null,\n  $content: null,\n  $main: null,\n  $footer: null,\n  $leftButtons: null,\n  $rightButtons: null,\n  $deleteBtn: null,\n  $saveBtn: null,\n  $saveCopyBtn: null,\n  $cancelBtn: null,\n  $saveSpinner: null,\n  $deleteSpinner: null,\n  $loadSpinner: null,\n\n  $html: null,\n  $js: null,\n  $css: null,\n  $currentHtml: null,\n  $currentJs: null,\n  $currentCss: null,\n\n  $observed: null,\n  observer: null,\n\n  executedJs: null,\n  loadedCss: null,\n  templateLoaded: false,\n\n  /**\n   * The constructor.\n   */\n  init: function (settings: object) {\n    this.base()\n    this.setSettings(settings, {\n      resizable: true\n    })\n\n    this.$currentHtml = $()\n    this.$currentJs = $()\n    this.$currentCss = $()\n    this.$observed = $()\n\n    this.executedJs = {}\n    this.loadedCss = {}\n\n    // It's important to observe the DOM for new nodes when rendering the field settings template, as more\n    // complex fields may be adding elements to the body such as modal windows or helper elements. Since the\n    // settings template gets re-rendered each time the modal window is opened, these elements also get\n    // recreated, so if the old ones aren't tracked and removed then they start polluting the DOM and\n    // potentially affect performance.\n    // This feels like a hack, but unfortunately since field type behaviour cannot be predicted (for example,\n    // third-party field type plugins) this is the cleanest possible solution.\n    this.observer = new window.MutationObserver((mutations) => {\n      for (let i = 0; i < mutations.length; i++) {\n        this.$observed = this.$observed.add(mutations[i].addedNodes)\n      }\n    })\n\n    const $container = $('<form class=\"modal quick-field-modal\" style=\"display: none; opacity: 0;\">').appendTo(Garnish.$bod)\n\n    this.$body = $('<div class=\"body\">').appendTo($container)\n    this.$content = $('<div class=\"content\">').appendTo(this.$body)\n    this.$main = $('<div class=\"main\">').appendTo(this.$content)\n    this.$footer = $('<div class=\"footer\">').appendTo($container)\n    this.$loadSpinner = $('<div class=\"spinner big\">').appendTo($container)\n\n    this.$leftButtons = $('<div class=\"buttons left\">').appendTo(this.$footer)\n    this.$rightButtons = $('<div class=\"buttons right\">').appendTo(this.$footer)\n\n    this.$deleteBtn = $('<a class=\"delete error hidden\">').text(Craft.t('quick-field', 'Delete')).appendTo(this.$leftButtons)\n    this.$deleteSpinner = $('<div class=\"spinner hidden\">').appendTo(this.$leftButtons)\n\n    this.$cancelBtn = $('<div class=\"btn disabled\" role=\"button\">').text(Craft.t('quick-field', 'Cancel')).appendTo(this.$rightButtons)\n    this.$saveBtn = $('<div class=\"btn submit disabled\" role=\"button\">').text(Craft.t('quick-field', 'Save')).appendTo(this.$rightButtons)\n    this.$saveCopyBtn = $('<div class=\"btn submit disabled hidden\" role=\"button\">').text(Craft.t('quick-field', 'Save as a new field')).appendTo(this.$rightButtons)\n    this.$saveSpinner = $('<div class=\"spinner hidden\">').appendTo(this.$rightButtons)\n\n    this.setContainer($container)\n  },\n\n  /**\n   * Prepares the field settings template HTML, CSS and JavaScript.\n   *\n   * @param template\n   */\n  initTemplate: function (this: FieldModal, template: Template) {\n    if (this.templateLoaded) {\n      return\n    }\n\n    const callback: (e: SettingsEvent) => void = (e) => {\n      this.$html = e.$html\n      this.$js = e.$js\n      this.$css = e.$css\n\n      this.templateLoaded = true\n      this.initListeners()\n\n      if (this.visible) {\n        this.initSettings()\n      }\n\n      this.off('parseTemplate', callback)\n    }\n\n    this.on('parseTemplate', callback)\n    this.parseTemplate(template)\n  },\n\n  /**\n   * Takes raw HTML, CSS and JavaScript and parses it ready to be used in the DOM.\n   * It also loads any external resources if they are needed.\n   *\n   * @param template\n   */\n  parseTemplate: function (this: FieldModal, template: Template) {\n    const $head = Garnish.$doc.find('head')\n    const $html = $(template.html)\n    const $js = $(template.js).filter('script')\n    const $css = $(template.css).filter('style, link')\n\n    // Ensure that external stylesheets are loaded asynchronously\n    const $cssFiles = $css.filter('link').prop('async', true)\n    const $cssInline = $css.filter('style')\n\n    $cssFiles.each((_, cssFile) => {\n      const $cssFile = $(cssFile)\n      const src = $cssFile.prop('href')\n\n      if (typeof this.loadedCss[src] === 'undefined') {\n        $head.append($cssFile)\n        this.loadedCss[src] = $cssFile\n      }\n    })\n\n    // Load external JavaScript files asynchronously, and remove them from being executed again.\n    // This assumes that external JavaScript files are simply library files, that don't directly and\n    // instantly execute code that modifies the DOM. Library files can be loaded and executed once and\n    // reused later on.\n    // The JavaScript tags that directly contain code are assumed to be context-dependent, so they are\n    // saved to be executed each time the modal is opened.\n    const $jsFiles = $js.filter('[src]')\n    const $jsInline = $js.filter(':not([src])')\n\n    const jsFiles: string[] = []\n    $jsFiles.each((_, jsFile) => {\n      const $jsFile = $(jsFile)\n      const src = $jsFile.prop('src')\n\n      if (typeof this.executedJs[src] === 'undefined') {\n        jsFiles.push(src)\n        this.executedJs[src] = true\n      }\n    })\n\n    const callback: () => void = () => {\n      this.off('runExternalScripts', callback)\n\n      this.trigger('parseTemplate', {\n        target: this,\n        $html: $html,\n        $js: $jsInline,\n        $css: $cssInline\n      })\n    }\n\n    this.on('runExternalScripts', callback)\n    this.runExternalScripts(jsFiles)\n  },\n\n  /**\n   * Runs external JavaScript files\n   *\n   * @param files - An array of URLs (as strings) to JavaScript files\n   */\n  runExternalScripts: function (files: string[]) {\n    let filesCount = files.length\n\n    if (filesCount > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const src = files[i]\n\n        $.getScript(src)\n          .done((_, status) => {\n            if (status === 'success') {\n              filesCount--\n\n              if (filesCount === 0) {\n                this.trigger('runExternalScripts', {\n                  target: this\n                })\n              }\n            } else {\n              Craft.cp.displayError(Craft.t('quick-field', 'Could not load all resources.'))\n            }\n          })\n          .catch(() => Craft.cp.displayError(Craft.t('quick-field', 'Could not load all resources.')))\n      }\n    } else {\n      this.trigger('runExternalScripts', {\n        target: this\n      })\n    }\n  },\n\n  /**\n   * Binds all listeners so the Quick Field buttons can start working.\n   */\n  initListeners: function () {\n    this.$cancelBtn.removeClass('disabled')\n    this.$saveBtn.removeClass('disabled')\n    this.$saveCopyBtn.removeClass('disabled')\n\n    this.addListener(this.$cancelBtn, 'activate', 'closeModal')\n    this.addListener(this.$saveBtn, 'activate', 'saveField')\n    this.addListener(this.$saveCopyBtn, 'activate', 'saveField')\n    this.addListener(this.$deleteBtn, 'activate', 'deleteField')\n\n    this.on('show', this.initSettings)\n    this.on('fadeOut', this.destroySettings)\n\n    this.enable()\n  },\n\n  /**\n   * Unbinds all listeners.\n   */\n  destroyListeners: function () {\n    this.$cancelBtn.addClass('disabled')\n    this.$saveBtn.addClass('disabled')\n    this.$saveCopyBtn.addClass('disabled')\n\n    this.removeListener(this.$cancelBtn, 'activate')\n    this.removeListener(this.$saveBtn, 'activate')\n    this.removeListener(this.$saveCopyBtn, 'activate')\n    this.removeListener(this.$deleteBtn, 'activate')\n\n    this.off('show', this.initSettings)\n    this.off('fadeOut', this.destroySettings)\n\n    this.disable()\n  },\n\n  /**\n   * Initialises the HTML, CSS and JavaScript for the modal window.\n   */\n  initSettings: function (this: FieldModal, e?: SettingsEvent) {\n    const that: FieldModal = e?.target ?? this\n\n    // If the template files aren't loaded yet, just cancel initialisation of the settings.\n    if (!that.templateLoaded) {\n      return\n    }\n\n    that.$currentHtml = e?.$html ?? that.$html.clone()\n    that.$currentJs = e?.$js ?? that.$js.clone()\n    that.$currentCss = e?.$css ?? that.$css.clone()\n\n    // Save any new nodes that are added to the body during initialisation, so they can be safely removed later.\n    that.$observed = $()\n    that.observer.observe(Garnish.$bod[0], { childList: true, subtree: false })\n\n    that.$main.append(that.$currentHtml)\n    Garnish.$bod.append(that.$currentJs)\n\n    // Only show the delete button if editing a field\n    const $fieldId = that.$main.find('input[name=\"qf[fieldId]\"]')\n    that.$deleteBtn.toggleClass('hidden', $fieldId.length === 0)\n\n    Craft.initUiElements()\n\n    // Rerun the external scripts as some field types may need to make DOM changes in their external files.\n    // This means that libraries are being initialized multiple times, but hopefully they're smart enough to\n    // deal with that. So far, no issues.\n    const callback: () => void = () => {\n      that.off('runExternalScripts', callback)\n\n      // Stop observing after a healthy timeout to ensure all mutations are captured.\n      setTimeout(() => that.observer.disconnect(), 1)\n    }\n\n    that.on('runExternalScripts', callback)\n    that.runExternalScripts(Object.keys(that.executedJs))\n  },\n\n  /**\n   * Event handler for when the modal window finishes fading out after hiding.\n   * Clears out all events and elements of the modal.\n   *\n   * @param e\n   */\n  destroySettings: function (e?: Event) {\n    const that = e?.target ?? this\n\n    that.$currentHtml.remove()\n    that.$currentJs.remove()\n    that.$currentCss.remove()\n    that.$observed.remove()\n\n    that.$deleteBtn.addClass('hidden')\n  },\n\n  /**\n   * Event handler for the Close button.\n   * Hides the modal window from view.\n   */\n  closeModal: function () {\n    this.hide()\n  },\n\n  /**\n   * Loads a template for editing an existing field.\n   *\n   * @param id\n   */\n  editField: function (id: number) {\n    this.destroyListeners()\n    this.show()\n    this.initListeners()\n\n    this.$loadSpinner.removeClass('hidden')\n    const data = { fieldId: id }\n\n    Craft.sendActionRequest('POST', 'quick-field/actions/edit-field', { data })\n      .then((response: EditFieldResponse) => {\n        const callback: (e: Event) => void = (e) => {\n          this.destroySettings()\n          this.initSettings(e)\n          this.$saveCopyBtn.removeClass('hidden')\n          this.off('parseTemplate', callback)\n        }\n\n        this.on('parseTemplate', callback)\n        this.parseTemplate(response.data.template)\n      })\n      .catch(response => {\n        Craft.cp.displayError(\n          response.error ?? Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n        )\n        this.hide()\n      })\n      .finally(() => this.$loadSpinner.addClass('hidden'))\n  },\n\n  /**\n   * Event handler for the save button.\n   * Saves the new field form to the database.\n   *\n   * @param e\n   */\n  saveField: function (this: FieldModal, e?: Event) {\n    e?.preventDefault()\n\n    if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n      return\n    }\n\n    this.destroyListeners()\n\n    this.$saveSpinner.removeClass('hidden')\n    const saveAsNew = this.$saveCopyBtn.is(e?.target)\n    const $inputId = this.$container.find('input[name=\"qf[fieldId]\"]')\n\n    if (saveAsNew) {\n      $inputId.val('')\n    }\n\n    const data = this.$container.serialize()\n    const id = !saveAsNew && $inputId.length > 0 ? $inputId.val() : null\n\n    Craft.sendActionRequest('POST', 'quick-field/actions/save-field', { data })\n      .then((response: SaveFieldResponse) => {\n        this.initListeners()\n        const eventData = {\n          target: this,\n          field: response.data.field,\n          elementSelector: response.data.elementSelector\n        }\n\n        if (id === null) {\n          this.trigger('newField', eventData)\n          Craft.cp.displayNotice(Craft.t('quick-field', 'New field created.'))\n        } else {\n          this.trigger('saveField', eventData)\n          Craft.cp.displayNotice(Craft.t('quick-field', '\\'{name}\\' field saved.', { name: response.data.field.name }))\n        }\n\n        this.hide()\n      })\n      .catch(({ response }) => {\n        if ((response.data?.template ?? null) !== null) {\n          if (this.visible) {\n            const callback: (e: Event) => void = (e) => {\n              this.initListeners()\n              this.destroySettings()\n              this.initSettings(e)\n              this.off('parseTemplate', callback)\n            }\n\n            this.on('parseTemplate', callback)\n            this.parseTemplate(response.data.template)\n            Garnish.shake(this.$container)\n          } else {\n            this.initListeners()\n          }\n        } else {\n          this.initListeners()\n          Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n        }\n      })\n      .finally(() => this.$saveSpinner.addClass('hidden'))\n  },\n\n  /**\n   * Event handler for the delete button.\n   * Deletes the field from the database.\n   *\n   * @param e\n   */\n  deleteField: function (this: FieldModal, e?: Event) {\n    e?.preventDefault()\n\n    if (this.$deleteBtn.hasClass('disabled') || !this.$deleteSpinner.hasClass('hidden')) {\n      return\n    }\n\n    if (this.promptForDelete()) {\n      this.destroyListeners()\n\n      this.$deleteSpinner.removeClass('hidden')\n\n      const inputId = this.$container.find('input[name=\"qf[fieldId]\"]')\n      const id = inputId.length > 0 ? inputId.val() : null\n\n      if (id === null) {\n        Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n        return\n      }\n\n      const data = { fieldId: id }\n\n      Craft.sendActionRequest('POST', 'quick-field/actions/delete-field', { data })\n        .then((response: DeleteFieldResponse) => {\n          this.initListeners()\n          this.trigger('deleteField', {\n            target: this,\n            field: response.data.field\n          })\n\n          Craft.cp.displayNotice(Craft.t('quick-field', '\\'{name}\\' field deleted.', { name: response.data.field.name }))\n          this.hide()\n        })\n        .catch(response => {\n          Craft.cp.displayError(\n            response.error ?? Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n          )\n          this.hide()\n        })\n        .finally(() => this.$deleteSpinner.addClass('hidden'))\n    }\n  },\n\n  /**\n   * Delete confirmation dialog box.\n   */\n  promptForDelete: function () {\n    return confirm(Craft.t('quick-field', 'Are you sure you want to delete this field?'))\n  },\n\n  /**\n   * Prevents the modal from closing if it's disabled.\n   * This fixes issues if the modal is closed when saving/deleting fields.\n   */\n  hide: function (this: FieldModal) {\n    if (!this._disabled) {\n      this.base()\n      setTimeout(() => this.$saveCopyBtn.addClass('hidden'), 200)\n    }\n  },\n\n  /**\n   * Removes everything to do with the modal from the DOM.\n   */\n  destroy: function () {\n    this.base()\n\n    this.destroyListeners()\n    this.destroySettings()\n\n    this.$shade.remove()\n    this.$container.remove()\n\n    this.trigger('destroy')\n  }\n})\n","import { SaveGroupResponse } from './types/Response'\n\ntype GroupUpdateEventFunction = (target: GarnishComponent, group: Group, oldName: string) => void\n\n/**\n * GroupDialog class.\n * Handles the dialog box for creating new field groups.\n */\nexport default Garnish.Base.extend({\n\n  /**\n   * The constructor.\n   */\n  init: function () {\n    this.quickField = null\n  },\n\n  /**\n   * Requests input for new group name, then creates the group.\n   */\n  addNewGroup: function () {\n    this._saveGroup(\n      null,\n      '',\n      this._triggerGroupUpdateEvent('newGroup')\n    )\n  },\n\n  /**\n   * Requests input for a new name for an existing group, then updates the group.\n   *\n   * @param id\n   * @param name\n   */\n  renameGroup: function (id: number, name: string) {\n    this._saveGroup(\n      id,\n      name,\n      this._triggerGroupUpdateEvent('renameGroup')\n    )\n  },\n\n  /**\n   * Internal function for saving new or updated groups.\n   *\n   * @param id\n   * @param oldName\n   * @param successCallback\n   * @private\n   */\n  _saveGroup: function (id: number, oldName: string, successCallback: GroupUpdateEventFunction) {\n    const name = this.promptForGroupName(oldName)\n\n    if (name !== '') {\n      const data = {\n        name: name,\n        id: id\n      }\n\n      Craft.sendActionRequest('POST', 'fields/save-group', { data })\n        .then((response: SaveGroupResponse) => successCallback(this, response.data.group, oldName))\n        .catch(({ response }) => {\n          const errorCount = Object.keys(response.data?.errors ?? {}).length\n\n          if (errorCount > 0) {\n            const errors: string[] = this._flattenErrors(response.data.errors)\n            alert(`${Craft.t('quick-field', 'Could not save the group:')}\\n\\n${errors.join('\\n')}`)\n          } else {\n            Craft.cp.displayError(Craft.t('quick-field', 'An unknown error occurred.'))\n          }\n        })\n    }\n  },\n\n  /**\n   * Internal function for triggering a group update event with a given name.\n   *\n   * @param eventName\n   * @private\n   */\n  _triggerGroupUpdateEvent: function (eventName: string): GroupUpdateEventFunction {\n    return (target, group, oldName) => {\n      target.trigger(eventName, {\n        target: target,\n        group: group,\n        oldName: oldName\n      })\n    }\n  },\n\n  /**\n   * Prompts for confirmation of deleting a field group, then deletes the group.\n   *\n   * @param groupId\n   */\n  deleteGroup: function (groupId: number) {\n    if (confirm(Craft.t('quick-field', 'Are you sure you want to delete this group and all its fields?'))) {\n      const data = {\n        id: groupId\n      }\n      Craft.sendActionRequest('POST', 'fields/delete-group', { data })\n        .then(_ => this.trigger('deleteGroup', { id: groupId }))\n        .catch(_ => Craft.cp.displayError(Craft.t('quick-field', 'Could not delete the group.')))\n    }\n  },\n\n  /**\n   * Creates and opens the dialog box asking for a group name.\n   *\n   * @return String\n   */\n  promptForGroupName: function (oldName: string) {\n    return prompt(Craft.t('quick-field', 'What do you want to name the group?'), oldName)\n  },\n\n  /**\n   * Utility method that transforms returned errors from an async request into a single dimension array.\n   * This is useful when outputting errors to the screen, so conversion to string is simpler.\n   *\n   * @return Array\n   */\n  _flattenErrors: function (responseErrors: Record<string, string>): string[] {\n    return Object.keys(responseErrors)\n      .reduce((errors: string[], key: string) => errors.concat(responseErrors[key]), [])\n  }\n})\n","import { LoadResponse } from './types/Response'\n\ninterface LoaderInterface extends GarnishComponent {\n  isUnloaded: () => boolean\n  load: () => void\n}\n\nenum LoadStatus {\n  UNLOADED,\n  LOADING,\n  LOADED\n}\n\n/**\n * Loader class.\n * Handles loading the data used by Quick Field.\n */\nconst Loader = Garnish.Base.extend({\n\n  loadStatus: null,\n\n  /**\n   * The constructor.\n   */\n  init: function () {\n    this.loadStatus = LoadStatus.UNLOADED\n    this.load()\n  },\n\n  /**\n   * Loads the field settings template file, as well as all the resources that come with it.\n   */\n  load: function () {\n    if (this.loadStatus === LoadStatus.UNLOADED) {\n      this.loadStatus = LoadStatus.LOADING\n      Craft.sendActionRequest('POST', 'quick-field/actions/load', {})\n        .then((response: LoadResponse) => {\n          this.loadStatus = LoadStatus.LOADED\n          this.trigger('load', {\n            template: response.data.template,\n            groups: response.data.groups\n          })\n        })\n        .catch(_ => {\n          this.loadStatus = LoadStatus.UNLOADED\n          this.trigger('unload')\n        })\n    }\n  },\n\n  /**\n   * Whether the initial load of Quick Field data hasn't occurred.\n   * @returns boolean\n   */\n  isUnloaded: function () {\n    return this.loadStatus === LoadStatus.UNLOADED\n  }\n})\n\nexport { Loader, LoaderInterface }\n","import * as $ from 'jquery'\nimport FieldModal from './FieldModal'\nimport GroupDialog from './GroupDialog'\nimport { Loader, LoaderInterface } from './Loader'\nimport { LoadResponseData } from './types/Response'\nimport Event from './types/Event'\n\ninterface QuickFieldInterface extends GarnishComponent {\n  _groupObserver: MutationObserver\n  _layouts: QuickFieldLayout[]\n  dialog: any\n  loader: LoaderInterface\n  modal: any\n  addFld: (fld: FieldLayoutDesigner) => void\n  addFieldEditButtonListener: ($button: JQuery) => void\n  openDeleteGroupDialog: ($group: JQuery) => void\n  openRenameGroupDialog: ($group: JQuery) => void\n  _newField: () => void\n  _addField: (field: Field, elementSelector: string) => void\n  _resetField: (field: Field, elementSelector: string) => void\n  _removeField: (id: number) => void\n  _addGroup: (group: Group, resetFldGroups: boolean) => void\n  _removeGroup: (id: number) => void\n  _renameGroup: (group: Group, oldName: string) => void\n  _addOptionToGroupSelect: ($option: JQuery, $select: JQuery, optionText: string) => void\n}\n\ninterface OptionEvent extends Event {\n  option: string\n}\n\ninterface FieldEvent extends Event {\n  field: Field\n}\n\ninterface SaveFieldEvent extends FieldEvent {\n  elementSelector: string\n}\n\ninterface DeleteGroupEvent extends Event {\n  id: number\n}\n\ninterface SaveGroupEvent extends Event {\n  group: Group\n  oldName: string\n}\n\nclass QuickFieldLayout {\n  public $container\n  public $groupButton\n  public $fieldButton\n  private readonly _groupObserver: MutationObserver\n\n  constructor (private readonly _quickField: QuickFieldInterface, public fld: FieldLayoutDesigner) {\n    this.fld.$container.addClass('quick-field')\n\n    this.$container = $('<div class=\"newfieldbtn-container btngroup small fullwidth\">').prependTo(fld.$fieldLibrary)\n    this.$groupButton = $('<div class=\"btn small add icon\" tabindex=\"0\">').text(Craft.t('quick-field', 'New Group')).appendTo(this.$container)\n    this.$fieldButton = $('<div class=\"btn small add icon\" tabindex=\"0\">').text(Craft.t('quick-field', 'New Field')).appendTo(this.$container)\n\n    // Make sure the groups are never hidden, so they can always be renamed or deleted\n    this._groupObserver = new window.MutationObserver(() => {\n      this.fld.$fieldGroups\n        .filter(function () {\n          // Don't unhide e.g. the 'standard fields' group\n          return ($(this).data('id')) ?? false\n        })\n        .removeClass('hidden')\n    })\n    this._groupObserver.observe(this.fld.$fieldLibrary[0], { attributes: true, childList: true, subtree: true })\n  }\n\n  public attachFieldButton (): void {\n    this.$fieldButton.appendTo(this.$container)\n  }\n\n  public detachFieldButton (): void {\n    this.$fieldButton.detach()\n  }\n\n  /**\n   * Adds edit buttons to existing fields.\n   */\n  public addFieldEditButtons (): void {\n    const addFieldEditButton: (_: number, field: HTMLElement) => void = (_, field) => this.addFieldEditButton($(field))\n\n    // The fields on the sidebar\n    this.fld.$fields.filter('.unused').each(addFieldEditButton)\n\n    // The fields on tabs\n    this.fld.$tabContainer.find('.fld-field[data-id]').each(addFieldEditButton)\n  }\n\n  /**\n   * Creates field edit buttons.\n   *\n   * @param $field\n   */\n  public addFieldEditButton ($field: JQuery): void {\n    const $button = $('<a class=\"qf-edit icon\" title=\"Edit\"></a>')\n    this._quickField.addFieldEditButtonListener($button)\n    $field.append($button)\n  }\n\n  /**\n   * Creates field group rename/delete menus.\n   *\n   * @param $group\n   * @private\n   */\n  public addGroupMenus (): void {\n    this.fld.$fieldGroups.each((_: number, group: HTMLElement) => this._addGroupMenu($(group)))\n  }\n\n  private _addGroupMenu ($group: JQuery): void {\n    const $button = $(`<button class=\"qf-settings icon menubtn\" title=\"${Craft.t('quick-field', 'Settings')}\" role=\"button\" type=\"button\"></button>`)\n    const $menu = $(`\n      <div class=\"menu\">\n        <ul class=\"padded\">\n          <li><a data-icon=\"edit\" data-action=\"rename\">${Craft.t('quick-field', 'Rename')}</a></li>\n          <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('quick-field', 'Delete')}</a></li>\n        </ul>\n      </div>\n    `)\n    $group.prepend($menu).prepend($button)\n    const settingsMenu = new Garnish.MenuBtn($button)\n    settingsMenu.on('optionSelect', (e: OptionEvent) => {\n      switch ($(e.option).attr('data-action')) {\n        case 'rename': this._quickField.openRenameGroupDialog($group); break\n        case 'delete': this._quickField.openDeleteGroupDialog($group)\n      }\n    })\n  }\n\n  /**\n   * Adds groups' ID data.\n   *\n   * @param groups\n   */\n  public addGroupIdData (groups: Group[]): void {\n    // Loop through the groups in reverse so we don't have to reset `this.fld.$fieldGroups` every\n    // time to get empty groups in the right place\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const group = groups[i]\n      let $group = this._getGroupByName(group.name)\n\n      if ($group.length === 0) {\n        this.addGroup(group, false)\n        $group = this._getGroupByName(group.name)\n      }\n\n      $group.data('id', group.id)\n    }\n\n    this._resetFldGroups()\n  }\n\n  public addField (field: Field, elementSelector: string): void {\n    const $group = this._getGroupByName(field.group.name)\n\n    if ($group !== null) {\n      this._insertFieldElementIntoGroup(field, elementSelector, $group)\n    } else {\n      throw new Error('Invalid field group: {groupName}')\n    }\n  }\n\n  public removeField (id: number): void {\n    const selector = `.fld-field[data-id=\"${id}\"]`\n    const fld = this.fld\n    const $fields = fld.$fields\n    const $field = $fields.filter(selector).add(fld.$tabContainer.find(selector))\n\n    $field.remove()\n    fld.$fields = $fields.not($field)\n    fld.elementDrag.removeItems($field)\n  }\n\n  public resetField (field: Field, elementSelector: string): void {\n    const fld = this.fld\n    const $group = this._getGroupByName(field.group.name)\n\n    // Remove the old element from the sidebar\n    const $oldElement = fld.$fields.filter(`[data-id=\"${field.id}\"]`)\n    fld.elementDrag.removeItems($oldElement)\n    $oldElement.remove()\n\n    this._insertFieldElementIntoGroup(field, elementSelector, $group)\n  }\n\n  public addGroup (group: Group, resetFldGroups: boolean): void {\n    const name = group.name\n    const lowerCaseName = name.toLowerCase()\n    const $newGroup = $(`\n      <div class=\"fld-field-group\" data-name=\"${lowerCaseName}\">\n        <h6>${name}</h6>\n      </div>`)\n    this._addGroupMenu($newGroup)\n    this._attachGroup($newGroup, resetFldGroups)\n    this._getGroupByName(group.name).data('id', group.id)\n  }\n\n  public renameGroup (group: Group, oldName: string): void {\n    const $group = this._getGroupByName(oldName)\n\n    if ($group.length > 0) {\n      const newName = group.name\n      const lowerCaseName = newName.toLowerCase()\n      $group.detach()\n        .attr('data-name', lowerCaseName)\n        .data('name', lowerCaseName)\n        .children('h6').text(newName)\n      this._attachGroup($group, true)\n    }\n  }\n\n  public removeGroup (id: number): void {\n    const fld = this.fld\n    const $deletedGroup = fld.$fieldGroups\n      .filter(function () {\n        return $(this).data('id') === id\n      })\n\n    // Remove any fields from this group from the tabs\n    const $usedFields = $deletedGroup.find('.fld-field.hidden')\n    const filterSelector = $usedFields.map((_: number, field: HTMLElement) => {\n      const fieldId: string = $(field).data('id')\n      return `[data-id=\"${fieldId}\"]`\n    }).get().join(',')\n    fld.$tabContainer\n      .find('.fld-field')\n      .filter(filterSelector)\n      .remove()\n\n    $deletedGroup.remove()\n    this._resetFldGroups()\n  }\n\n  /**\n   * Inserts a field element into the correct position in its group.\n   *\n   * @param field\n   * @param elementSelector\n   * @param $group\n   * @private\n   */\n  private _insertFieldElementIntoGroup (field: Field, elementSelector: string, $group: JQuery): void {\n    const fld = this.fld\n    const $element = $(elementSelector)\n    const lowerCaseName = field.name.toLowerCase()\n    let $prevElement = $group.children('.fld-element').filter(function () {\n      return $(this).find('h4').text().toLowerCase() < lowerCaseName\n    }).last()\n\n    if ($prevElement.length === 0) {\n      $prevElement = $group.children('h6')\n    }\n\n    $element.insertAfter($prevElement)\n    fld.elementDrag.addItems($element)\n    this.addFieldEditButton($element)\n    fld.$fields = fld.$fieldGroups.children('.fld-element')\n  }\n\n  /**\n   * Attaches a group to the correct position in the sidebar.\n   *\n   * @param $group\n   * @param resetFldGroups\n   * @private\n   */\n  private _attachGroup ($group: JQuery, resetFldGroups: boolean): void {\n    const fld = this.fld\n    const lowerCaseName = $group.attr('data-name') ?? ''\n    let $prevElement = fld.$fieldGroups.filter(function () {\n      const $this = $(this)\n      return $this.hasClass('hidden') || $this.data('name') < lowerCaseName\n    }).last()\n\n    if ($prevElement.length === 0) {\n      $prevElement = fld.$fieldSearch.parent()\n    }\n\n    $group.insertAfter($prevElement)\n\n    if (resetFldGroups) {\n      this._resetFldGroups()\n    }\n  }\n\n  /**\n   * Resets Craft's record of the field groups in the field layout designer sidebar.\n   *\n   * @private\n   */\n  private _resetFldGroups (): void {\n    this.fld.$fieldGroups = this.fld.$sidebar.find('.fld-field-group')\n  }\n\n  /**\n   * Finds the group element from its name.\n   *\n   * @param name\n   * @returns {*}\n   * @private\n   */\n  private _getGroupByName (name: string): JQuery {\n    // Filtering `this.fld.$sidebar.find('.fld-field-group')` instead of `this.fld.$fieldGroups`, in\n    // case we're adding groups and we haven't reset `this.fld.$fieldGroups` yet\n    return this.fld.$sidebar.find('.fld-field-group').filter(`[data-name=\"${name.toLowerCase()}\"]`)\n  }\n}\n\n/**\n * QuickField class\n * Handles the buttons for creating new groups and fields inside a FieldLayoutDesigner\n */\nconst QuickField = Garnish.Base.extend({\n\n  dialog: null,\n  modal: null,\n  loader: null,\n\n  /**\n   * The constructor.\n   */\n  init: function (this: QuickFieldInterface) {\n    let fieldButtonAttached = true\n\n    this._layouts = []\n    this.dialog = new GroupDialog()\n    this.modal = new FieldModal()\n    this.loader = new Loader()\n\n    this.dialog.on('newGroup', (e: SaveGroupEvent) => {\n      const group = e.group\n      this._addGroup(group, true)\n\n      if (this.loader.isUnloaded()) {\n        this.loader.load()\n      } else if (!fieldButtonAttached) {\n        this._layouts.forEach((layout) => layout.attachFieldButton())\n        fieldButtonAttached = true\n      }\n    })\n\n    this.dialog.on('renameGroup', (e: SaveGroupEvent) => this._renameGroup(e.group, e.oldName))\n    this.dialog.on('deleteGroup', (e: DeleteGroupEvent) => {\n      this._removeGroup(e.id)\n\n      this._layouts.forEach((layout) => {\n        if (layout.fld.$fieldGroups.not('.hidden').length === 0) {\n          layout.detachFieldButton()\n          fieldButtonAttached = false\n        }\n      })\n    })\n\n    this.modal.on('newField', (e: SaveFieldEvent) => this._addField(e.field, e.elementSelector))\n    this.modal.on('saveField', (e: SaveFieldEvent) => this._resetField(e.field, e.elementSelector))\n    this.modal.on('deleteField', (e: FieldEvent) => this._removeField(e.field.id))\n    this.modal.on('destroy', () => {\n      this._layouts.forEach((layout) => layout.detachFieldButton())\n      fieldButtonAttached = false\n    })\n\n    this.loader.on('load', (e: LoadResponseData) => {\n      this.modal.$loadSpinner.addClass('hidden')\n      this.modal.initTemplate(e.template)\n      this._layouts.forEach((layout) => layout.addGroupIdData(e.groups))\n\n      if (!fieldButtonAttached) {\n        this._layouts.forEach((layout) => layout.$fieldButton.appendTo(layout.$container))\n        fieldButtonAttached = true\n      }\n    })\n    this.loader.on('unload', () => this.modal.destroy())\n  },\n\n  addFld: function (fld: FieldLayoutDesigner) {\n    const newLayout = new QuickFieldLayout(this, fld)\n    this._layouts.push(newLayout)\n    this.addListener(newLayout.$groupButton, 'activate', '_newGroup')\n    this.addListener(newLayout.$fieldButton, 'activate', '_newField')\n\n    newLayout.addFieldEditButtons()\n    newLayout.addGroupMenus()\n  },\n\n  addFieldEditButtonListener: function ($button: JQuery): void {\n    this.addListener($button, 'activate', '_editField')\n  },\n\n  /**\n   * Event handler for the New Field button.\n   * Creates a modal window that contains new field settings.\n   *\n   * @private\n   */\n  _newField: function () {\n    this.modal.show()\n  },\n\n  /**\n   * Event handler for the edit buttons on fields.\n   * Opens a modal window that contains the field settings.\n   *\n   * @param e\n   * @private\n   */\n  _editField: function (e: Event) {\n    const $button = $(e.target)\n    const $field = $button.parent()\n    const id = $field.data('id')\n\n    this.modal.editField(id)\n  },\n\n  /**\n   * Adds a new unused (dashed border) field to the field layout designer.\n   *\n   * @param field\n   * @param elementSelector\n   * @private\n   */\n  _addField: function (this: QuickFieldInterface, field: Field, elementSelector: string) {\n    try {\n      this._layouts.forEach((layout) => layout.addField(field, elementSelector))\n    } catch (e) {\n      Craft.cp.displayError(Craft.t('quick-field', e.message, { groupName: field.group.name }))\n    }\n  },\n\n  /**\n   * Removes a field from the field layout designer.\n   *\n   * @param id\n   * @private\n   */\n  _removeField: function (this: QuickFieldInterface, id: number) {\n    this._layouts.forEach((layout) => layout.removeField(id))\n  },\n\n  /**\n   * Renames and regroups an existing field on the field layout designer.\n   *\n   * @param field\n   * @param elementSelector\n   * @private\n   */\n  _resetField: function (this: QuickFieldInterface, field: Field, elementSelector: string) {\n    this._layouts.forEach((layout) => layout.resetField(field, elementSelector))\n  },\n\n  /**\n   * Event listener for the new group button\n   *\n   * @private\n   */\n  _newGroup: function () {\n    this.dialog.addNewGroup()\n  },\n\n  /**\n   * Adds a new unused group to the field layout designer sidebar.\n   *\n   * @param group\n   * @param resetFldGroups\n   * @private\n   */\n  _addGroup: function (this: QuickFieldInterface, group: Group, resetFldGroups: boolean) {\n    this._layouts.forEach((layout) => layout.addGroup(group, resetFldGroups))\n\n    // Add this group to the 'new field' group options if the modal's already been loaded\n    if (this.modal.$html !== null) {\n      this._addOptionToGroupSelect(\n        $(`<option value=\"${group.id}\">${group.name}</option>`),\n        this.modal.$html.find('#qf-group'),\n        group.name\n      )\n    }\n  },\n\n  /**\n   * Opens the field group dialog for renaming a group.\n   *\n   * @param $group\n   */\n  openRenameGroupDialog: function ($group: JQuery) {\n    const id = $group.data('id')\n    const oldName = $group.children('h6').text()\n    this.dialog.renameGroup(id, oldName)\n  },\n\n  /**\n   * Renames a field group.\n   *\n   * @param group\n   * @param oldName\n   * @private\n   */\n  _renameGroup: function (this: QuickFieldInterface, group: Group, oldName: string) {\n    this._layouts.forEach((layout) => layout.renameGroup(group, oldName))\n\n    // Update this group in the 'new field' group options\n    const $select = this.modal.$html.find('#qf-group')\n    const $options = $select.children()\n    const $option = $options.filter(function () {\n      return $(this).text() === oldName\n    }).detach().text(group.name)\n    this._addOptionToGroupSelect($option, $select, group.name)\n  },\n\n  /**\n   * Adds a field group option to the new field template.\n   *\n   * @param $option\n   * @param $select\n   * @param optionText\n   * @private\n   */\n  _addOptionToGroupSelect: function ($option: JQuery, $select: JQuery, optionText: string) {\n    const $prevOption = $select.children().filter(function () {\n      return $(this).text().toLowerCase() < optionText.toLowerCase()\n    }).last()\n\n    if ($prevOption.length > 0) {\n      $option.insertAfter($prevOption)\n    } else {\n      $option.prependTo($select)\n    }\n  },\n\n  /**\n   * Opens the field group dialog for deleting a group.\n   *\n   * @param $group\n   */\n  openDeleteGroupDialog: function ($group: JQuery) {\n    const id = $group.data('id')\n    this.dialog.deleteGroup(id)\n  },\n\n  /**\n   * Removes a deleted field group, and any fields belonging to it.\n   *\n   * @param id\n   * @private\n   */\n  _removeGroup: function (this: QuickFieldInterface, id: number) {\n    this._layouts.forEach((layout) => layout.removeGroup(id))\n\n    // Remove this group from the 'new field' group options\n    this.modal.$html.find('#qf-group').children(`[value=\"${id}\"]`).remove()\n  }\n})\n\nexport { QuickField, QuickFieldInterface }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { QuickField, QuickFieldInterface } from './QuickField'\nimport '../styles/main.scss'\n\ndeclare global {\n  interface Window {\n    QuickField: QuickFieldInterface\n  }\n}\n\nwindow.QuickField = new QuickField()\nconst FLD = Craft.FieldLayoutDesigner\nconst FLDinit = FLD.prototype.init\nconst FLDElement = FLD.Element\nconst FLDElementInitUi = FLDElement.prototype.initUi\n\n/**\n * Override the current FieldLayoutDesigner \"constructor\" so new buttons can be initialised.\n */\nFLD.prototype.init = function (this: FieldLayoutDesigner) {\n  FLDinit.apply(this, arguments)\n\n  if (this.$container.is('.layoutdesigner')) {\n    window.QuickField.addFld(this)\n  }\n}\n\n/**\n * Override the current FieldLayoutDesigner.Element.initUi() so field edit buttons can be initialised.\n */\nFLDElement.prototype.initUi = function (this: FldElement) {\n  FLDElementInitUi.apply(this, arguments)\n\n  if (this.$container.is('.fld-field')) {\n    window.QuickField.addFieldEditButtonListener(this.$container.find('.qf-edit'))\n  }\n}\n"],"names":["Garnish","Modal","extend","$body","$content","$main","$footer","$leftButtons","$rightButtons","$deleteBtn","$saveBtn","$saveCopyBtn","$cancelBtn","$saveSpinner","$deleteSpinner","$loadSpinner","$html","$js","$css","$currentHtml","$currentJs","$currentCss","$observed","observer","executedJs","loadedCss","templateLoaded","init","settings","this","base","setSettings","resizable","$","window","MutationObserver","mutations","i","length","add","addedNodes","$container","appendTo","$bod","text","Craft","t","setContainer","initTemplate","template","callback","e","initListeners","visible","initSettings","off","on","parseTemplate","$head","$doc","find","html","js","filter","css","$cssFiles","prop","$cssInline","each","_","cssFile","$cssFile","src","append","$jsFiles","$jsInline","jsFiles","jsFile","push","trigger","target","runExternalScripts","files","filesCount","getScript","done","status","cp","displayError","catch","removeClass","addListener","destroySettings","enable","destroyListeners","addClass","removeListener","disable","that","clone","observe","childList","subtree","$fieldId","toggleClass","initUiElements","setTimeout","disconnect","Object","keys","remove","closeModal","hide","editField","id","show","data","fieldId","sendActionRequest","then","response","error","finally","saveField","preventDefault","hasClass","saveAsNew","is","$inputId","val","serialize","eventData","field","elementSelector","displayNotice","name","shake","deleteField","promptForDelete","inputId","confirm","_disabled","destroy","$shade","Base","quickField","addNewGroup","_saveGroup","_triggerGroupUpdateEvent","renameGroup","oldName","successCallback","promptForGroupName","group","errors","_flattenErrors","alert","join","eventName","deleteGroup","groupId","prompt","responseErrors","reduce","key","concat","LoadStatus","Loader","loadStatus","UNLOADED","load","LOADING","LOADED","groups","isUnloaded","QuickFieldLayout","constructor","_quickField","fld","prependTo","$fieldLibrary","$groupButton","$fieldButton","_groupObserver","$fieldGroups","attributes","attachFieldButton","detachFieldButton","detach","addFieldEditButtons","addFieldEditButton","$fields","$tabContainer","$field","$button","addFieldEditButtonListener","addGroupMenus","_addGroupMenu","$group","$menu","prepend","MenuBtn","option","attr","openRenameGroupDialog","openDeleteGroupDialog","addGroupIdData","_getGroupByName","addGroup","_resetFldGroups","addField","Error","_insertFieldElementIntoGroup","removeField","selector","not","elementDrag","removeItems","resetField","$oldElement","resetFldGroups","lowerCaseName","toLowerCase","$newGroup","_attachGroup","newName","children","removeGroup","$deletedGroup","filterSelector","map","get","$element","$prevElement","last","insertAfter","addItems","$this","$fieldSearch","parent","$sidebar","QuickField","dialog","modal","loader","fieldButtonAttached","_layouts","_addGroup","forEach","layout","_renameGroup","_removeGroup","_addField","_resetField","_removeField","addFld","newLayout","_newField","_editField","message","groupName","_newGroup","_addOptionToGroupSelect","$select","$option","optionText","$prevOption","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","r","Symbol","toStringTag","defineProperty","value","FLD","FieldLayoutDesigner","FLDinit","prototype","FLDElement","Element","FLDElementInitUi","initUi","apply","arguments"],"sourceRoot":""}