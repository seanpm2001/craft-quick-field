{% requireAdmin %}

{% import "_includes/forms" as forms %}

{% if groupId is not defined %}
    {% set groupId = field.groupId ?? groups|keys[0] %}
{% endif %}

{% if groups[groupId] is not defined %}
    {% exit 404 %}
{% endif %}

{% set fieldType = field is missing ? field.expectedType : className(field) %}

{% if fieldId is defined %}
    <input type="hidden" name="qf[fieldId]" value="{{ fieldId }}">
{% endif %}

{% set groupOptions = [] %}
{% for group in groups %}
    {% set groupOptions = groupOptions|merge([{ label: group.name, value: group.id }]) %}
{% endfor %}
{{ forms.selectField({
    first: true,
    label: 'Group'|t('app'),
    instructions: 'Which group should this field be displayed in?'|t('app'),
    id: 'qf-group',
    name: 'qf[group]',
    options: groupOptions,
    value: groupId
}) }}

{{ forms.textField({
    label: 'Name'|t('app'),
    instructions: 'What this field will be called in the CP.'|t('app'),
    id: 'qf-name',
    name: 'qf[name]',
    value: field.name,
    errors: field.getErrors('name'),
    required: true,
    translatable: true,
    autofocus: true
}) }}

{{ forms.textField({
    label: 'Handle'|t('app'),
    instructions: 'How you’ll refer to this field in the templates.'|t('app'),
    id: 'qf-handle',
    class: 'code',
    name: 'qf[handle]',
    maxlength: 64,
    value: field.handle,
    errors: field.getErrors('handle'),
    required: true,
}) }}

{{ forms.textareaField({
    label: 'Default Instructions'|t,
    instructions: 'Helper text to guide the author.'|t('app'),
    id: 'qf-instructions',
    class: 'nicetext',
    name: 'qf[instructions]',
    value: field.instructions,
    errors: field.getErrors('instructions'),
    translatable: true
}) }}

{#
{% if craft.isLocalized() %}
    {{ forms.checkboxField({
        label: "This field is translatable"|t,
        name: 'qf[translatable]',
        checked: (field is defined ? field.translatable : false)
    }) }}
{% endif %}
#}

{{ forms.checkboxField({
    label: 'Use this field’s values as search keywords'|t('app'),
    id: 'qf-searchable',
    name: 'qf[searchable]',
    checked: field.searchable
}) }}

{{ forms.selectField({
    label: 'Field Type'|t('app'),
    instructions: 'What type of field is this?'|t('app'),
    id: 'qf-type',
    name: 'qf[type]',
    options: fieldTypeOptions,
    value: fieldType,
    errors: (field is missing ? ["The fieldtype class “{class}” could not be found."|t({ class: fieldType })] : null),
    toggle: true,
    targetPrefix: 'qf-'
}) }}

<hr>

{% for _fieldType in fieldTypes %}
    {% set isCurrent = (_fieldType == fieldType) %}
    <div id="qf-{{ _fieldType|namespaceInputId }}"{% if not isCurrent %} class="hidden"{% endif %}>
        {% namespace 'qf[types][' ~ _fieldType ~ ']' %}
            {% if isCurrent %}
                {{ field.getSettingsHtml()|raw }}
            {% else %}
                {{ craft.app.fields.createField(_fieldType).getSettingsHtml()|raw }}
            {% endif %}
        {% endnamespace %}
    </div>
{% endfor %}

{% if not field.handle %}
    {% js "new Craft.HandleGenerator('#qf-name', '#qf-handle');" %}
{% endif %}
